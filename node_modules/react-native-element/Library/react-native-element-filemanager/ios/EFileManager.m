//
//  EFileManager.m
//  T
//
//  Created by 王铁山 on 2017/10/25.
//  Copyright © 2017年 tieshan. All rights reserved.
//

#import "EFileManager.h"

@implementation EFileManager

RCT_EXPORT_MODULE();

/**
 获取本地的完整路径
 **/
RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(getSandBoxBasePath: (NSString *)moduleName) {
    return [self basePath:moduleName];
}

/**
 存储内容到本地
 **/
RCT_EXPORT_METHOD(storage: (NSString *)key obj:(id)obj suiteName: (NSString *) suiteName) {
    NSUserDefaults * defaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];
    if (obj) {
        [defaults setObject:obj forKey:key];
    } else {
        [defaults removeObjectForKey: key];
    }
    
    [defaults synchronize];
}

/**
 存储内容到本地
 **/
RCT_EXPORT_METHOD(storageString: (NSString *)key obj:(id)obj suiteName: (NSString *) suiteName) {
    [self storage:key obj:obj suiteName: suiteName];
}

/**
 存储内容到本地
 **/
RCT_EXPORT_METHOD(storageNumber: (NSString *)key obj:(id)obj suiteName: (NSString *) suiteName) {
    [self storage:key obj:obj suiteName: suiteName];
}

/**
 存储内容到本地
 **/
RCT_EXPORT_METHOD(storageBool: (NSString *)key obj:(id)obj suiteName: (NSString *) suiteName) {
    [self storage:key obj:obj suiteName: suiteName];
}


/**
 获取存储到本地的内容
 **/
RCT_EXPORT_METHOD(getStorage: (NSString *)key suiteName: suiteName callBack: (RCTResponseSenderBlock)callback) {
    NSUserDefaults * defaults = [[NSUserDefaults alloc] initWithSuiteName: suiteName];
    id value = [defaults objectForKey:key];
    callback(@[[NSNull null], (value ?: [NSNull null])]);
}

/**
 获取存储到本地的内容
 **/
RCT_EXPORT_METHOD(getStorageString: (NSString *)key suiteName: suiteName callBack: (RCTResponseSenderBlock)callback) {
    [self getStorage:key suiteName: suiteName callBack:callback];
}

/**
 获取存储到本地的内容
 **/
RCT_EXPORT_METHOD(getStorageNumber: (NSString *)key suiteName: suiteName callBack: (RCTResponseSenderBlock)callback) {
    [self getStorage:key suiteName: suiteName callBack:callback];
}

/**
 获取存储到本地的内容
 **/
RCT_EXPORT_METHOD(getStorageBool: (NSString *)key suiteName: suiteName callBack: (RCTResponseSenderBlock)callback) {
    [self getStorage:key suiteName: suiteName callBack:callback];
}

/**
 获取本地的完整路径
 **/
RCT_EXPORT_METHOD(fileInfo: (NSString *)path moduleName: (NSString *)moduleName callBack: (RCTResponseSenderBlock)callback) {
    NSString * realPath = [self realSandBoxPath: path moduleName: moduleName];
    BOOL isDirectory = false;
    BOOL exit = [[NSFileManager defaultManager] fileExistsAtPath:realPath isDirectory: &isDirectory];
    callback(@[[NSNull null], [self jsonToString:@{@"exist": @(exit ? 1 : 0), @"isDirectory": @(isDirectory ? 1 : 0), @"path": realPath, @"subPath": path}]]);
}

/**
 创建文件夹
 **/
RCT_EXPORT_METHOD(createDirectory: (NSString *)path moduleName: (NSString *)moduleName callBack: (RCTResponseSenderBlock)callback) {
    NSString * realPath = [self realSandBoxPath: path moduleName: moduleName];
    NSError * error;
    BOOL suc = [[NSFileManager defaultManager] createDirectoryAtPath:realPath withIntermediateDirectories:true attributes:nil error:&error];
    callback(@[[self rnParamsByError:error], [self jsonToString:@{@"path": realPath, @"success": @(suc ? 1 : 0), @"subPath": path}]]);
}

RCT_EXPORT_METHOD(move: (NSString *)fromPath moduleName: (NSString *)moduleName toPath:(NSString *)toPath callBack: (RCTResponseSenderBlock)callback) {
    NSString * realPath = [self realSandBoxPath: fromPath moduleName: moduleName];
    NSString * toRealPath = [self realSandBoxPath: toPath moduleName: moduleName];
    NSError * error;
    BOOL suc = [[NSFileManager defaultManager] moveItemAtPath: realPath toPath:toRealPath error:&error];
    callback(@[[self rnParamsByError:error], [self jsonToString:@{@"path": realPath, @"toPath": toRealPath, @"success": @(suc ? 1 : 0), @"fromSubPath": fromPath, @"toSubPath": toPath}]]);
}

/**
 删除文件
 **/
RCT_EXPORT_METHOD(removeItem: (NSString *)path moduleName: (NSString *)moduleName callBack: (RCTResponseSenderBlock)callback) {
    NSString * realPath = [self realSandBoxPath: path moduleName: moduleName];
    NSError * error;
    BOOL suc = [[NSFileManager defaultManager] removeItemAtPath:realPath error:&error];
    callback(@[[self rnParamsByError:error], [self jsonToString:@{@"path": realPath, @"success": @(suc ? 1 : 0), @"subPath": path}]]);
}

/**
 临时图片路径
 **/
RCT_EXPORT_METHOD(tmpImagePath: (RCTResponseSenderBlock)callback) {
    NSString * subPath = @"Library/Cache/ReactNativeTmpImage";
    NSString * directory = [NSHomeDirectory() stringByAppendingPathComponent:subPath];
    if (![[NSFileManager defaultManager] fileExistsAtPath:directory]) {
        [[NSFileManager defaultManager] createDirectoryAtPath:directory withIntermediateDirectories:true attributes:nil error:nil];
    }
    NSString * fileName = [[NSUUID UUID] UUIDString];
    
    NSString * fullPath = [directory stringByAppendingPathComponent:fileName];
    
    if ([[NSFileManager defaultManager] fileExistsAtPath:directory]) {
        
        fileName = [[NSUUID UUID] UUIDString];
        
        fullPath = [directory stringByAppendingPathComponent:fileName];
    }
    
    callback(@[[NSNull null], [self jsonToString:@{@"path": fullPath, @"subPath": [subPath stringByAppendingPathComponent:fileName]}]]);
}

@end


@implementation EFileManager(tool)

-(id)stringToObject: (NSString *)str {
    if (!str) {
        return nil;
    }
    return [NSJSONSerialization JSONObjectWithData:[str dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingAllowFragments error:nil];
}

-(NSString *)jsonToString:(id)obj {
    if (!obj) {
        return nil;
    }
    NSData * data = [NSJSONSerialization dataWithJSONObject:obj options:NSJSONWritingPrettyPrinted error:nil];
    if (data) {
        return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    }
    return nil;
}

-(NSString *)realSandBoxPath:(NSString * )path moduleName: (NSString *)moduleName {
    return [[self basePath:moduleName] stringByAppendingPathComponent:path];
}

-(NSString *)basePath:(NSString *)moduleName {
    NSString * path = [NSHomeDirectory() stringByAppendingPathComponent:[@"Library/Caches/" stringByAppendingString:moduleName]];
    BOOL exit = [[NSFileManager defaultManager] fileExistsAtPath:path isDirectory: nil];
    if (!exit) {
        [[NSFileManager defaultManager] createDirectoryAtPath:path withIntermediateDirectories:true attributes:nil error:nil];
    }
    return path;
}

- (id)rnParamsByError: (NSError *)error {
    if (!error) {
        return [NSNull null];
    }
    NSInteger code = error.code;
    NSString * desc = error.localizedDescription;
    return [self jsonToString: @{
             @"code": [NSString stringWithFormat:@"%ld", code],
             @"message": desc,
             }];
}

- (NSString *)rnParamsByMessage: (NSString *)desc {
    return [self jsonToString:  @{
             @"code": @"500",
             @"message": desc,
             }];
}

@end
