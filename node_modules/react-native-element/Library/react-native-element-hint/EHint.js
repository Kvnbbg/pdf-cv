/**
 * Created by wangtieshan on 2017/10/17.
 */

import React, { Component } from 'react';

import {
    View,
    ActivityIndicator,
    Text,
    StyleSheet,
} from 'react-native';

import PropTypes from 'prop-types';

export interface EHintOptions {
    /**
     * 提示标题
     */
    title: string;
    /**
     * 提示副标题
     */
    subTitle: string;
    /**
     * 提示标题CSS
     */
    titleStyle: string;
    /**
     * 提示副标题CSS
     */
    subTitleStyle: string;
    /**
     * 提示框展示时间。默认：2000
     * makeActivity 方法，不受此字段限制
     */
    duration: string;
}

/**
 * 给所有的Component增加对象方法
 * 1. 可以做到每个组件都拥有自己的提示框，尽量减少页面的刷新
 * 2. 提供便捷的方法
 */
Object.assign(Component.prototype, {
    /**
     * 便捷的调起提示框
     * @param options 如果为字符串，则代表 title。如果为：EHintOptions 则完全采用 EHintOptions 配置。兼容老式调用方法
     * @param _subTitle 副标题。此字段不建议使用
     * @param _titleStyle 标题CSS。此字段不建议使用
     * @param _subTitleStyle 副标题CSS。此字段不建议使用
     */
    makeHint(options: EHintOptions, _subTitle: string, _titleStyle: any, _subTitleStyle: any) {
        let title, subTitle, titleStyle, subTitleStyle, duration = 2000;
        if (typeof options === 'string') {
            title = options;
            subTitle = _subTitle;
            titleStyle = _titleStyle;
            subTitleStyle = _subTitleStyle;
        } else {
            title = options.title;
            subTitle = options.subTitle;
            titleStyle = options.titleStyle;
            subTitleStyle = options.subTitleStyle;
            if (options.hasOwnProperty('duration')) {
                duration = options.duration;
            }
        }
        this.setState({
            hint: {
                activity: false,
                show: true,
                title: title,
                subTitle: subTitle,
                titleStyle: titleStyle,
                subTitleStyle: subTitleStyle
            }
        });
        let timer = setTimeout(() => {
            clearTimeout(timer);
            this.setState({
                hint: {
                    show: false,
                }
            })
        }, duration)
    },
    /**
     * 便捷的调起提示框。
     * 此提示框不会自动消失，需要调用 hiddenActivity 。需成对出现
     * @param options 如果为字符串，则代表 title。如果为：EHintOptions 则完全采用 EHintOptions 配置。兼容老式调用方法
     * @param _subTitle 副标题。此字段不建议使用
     * @param _titleStyle 标题CSS。此字段不建议使用
     * @param _subTitleStyle 副标题CSS。此字段不建议使用
     */
    makeActivity (options: EHintOptions, _subTitle: string, _titleStyle: any, _subTitleStyle: any) {
        let title, subTitle, titleStyle, subTitleStyle;
        if (typeof options === 'string') {
            title = options;
            subTitle = _subTitle;
            titleStyle = _titleStyle;
            subTitleStyle = _subTitleStyle;
        } else if (options) {
            title = options.title;
            subTitle = options.subTitle;
            titleStyle = options.titleStyle;
            subTitleStyle = options.subTitleStyle;
        }
        this.setState({
            hint: {
                activity: true,
                show: true,
                title: title,
                subTitle: subTitle,
                titleStyle: titleStyle,
                subTitleStyle: subTitleStyle
            }
        });
    },

    /**
     * 隐藏 loading
     */
    hiddenActivity() {
        if (!this.state.hint.show) { return; }
        this.setState({
            hint: {
                show: false,
            }
        })
    },

    /**
     * 提供组件对象方法快捷返回一个提示框视图。
     * 将此提示框视图放入组件中，则可以直接使用 this.makeHint 等方法
     * @returns {*}
     */
    hintView(): EHint {
        if (!this.state) {
            this.state = {};
        }
        if (!this.state.hint) {
            this.state.hint = {show: false};
        }
        if (this.state.hint.show) {
            return <EHint {...this.state.hint}/>
        }
    }
});

class EHint extends Component {

    constructor(props) {
        super(props);
        this.state = {
            titleWidth: null,
            subTitleWidth: null,
            bgWidth: null,
        };
    }

    static defaultProps = {
        activity: false,
    };

    static propTypes = {
        /** title **/
        title: PropTypes.string,
        /** subTitle **/
        subTitle: PropTypes.string,
        /** config container style **/
        style: PropTypes.object,
        /** need activity **/
        activity: PropTypes.bool,
        /** title extra style **/
        titleStyle: PropTypes.object,
        /** subTitle extra style **/
        subTitleStyle: PropTypes.object,
    };

    render() {

        // 三个组件展示是否展示
        let shows = {
            title: this.props.title && this.props.title.length >= 0,
            subTitle: this.props.subTitle && this.props.subTitle.length >= 0,
            activity: this.props.activity,
        };

        return (
            <View style={[styles.body, this.props.style]}>
                <View style={[styles.container]}>
                    <View style={[styles.bgView]}>
                        {this._activityView(shows)}
                        {this._titleView(shows)}
                        {this._subTitleView(shows)}
                    </View>
                </View>
            </View>
        )
    }

    /*获取 activity*/
    _activityView(shows) {
        if (shows.activity) {
            // 标题和副标题都没有则没必要布局
            let style = (!shows.title && !shows.subTitle) ? {marginTop: 10, marginBottom: 10.} : { marginTop: 10, };
            return <ActivityIndicator
                animating= {true}
                size= {'large'}
                color= {'white'}
                style= {style} />
        }
    }

    _titleView(shows) {
        if (shows.title) {
            let style = { width: this.state.titleWidth };
            style.marginTop = shows.activity ? 10 : 15;
            style.marginBottom = shows.subTitle ? 0 : 15;
            style.minWidth = 55;
            return <Text
                style={[styles.title, style, this.props.titleStyle]}>
                {this.props.title}
            </Text>
        }
    }

    _subTitleView(shows) {
        if (shows.subTitle) {
            let style = { width: this.state.subTitleWidth };
            style.marginTop = 10;
            style.marginBottom = 15;
            style.minWidth = 55;
            return <Text
                style={[styles.subTitle, style, this.props.subTitleStyle]}>{this.props.subTitle}</Text>
        }

    }
}

const styles = StyleSheet.create({

    body: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        top: 0,
        flexDirection:'row',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#00000000',
    },
    container: {
        justifyContent: 'center',
        alignItems: 'center',
        marginLeft: 25,
        marginRight: 25,
    },
    bgView: {
        backgroundColor: '#000000BB',
        borderRadius: 3,
        justifyContent: 'center',
        alignItems: 'center',
        paddingLeft: 10,
        paddingRight: 10,
    },
    title : {
        color: 'white',
        paddingLeft: 20,
        paddingRight: 20,
        fontSize: 16,
        textAlign: 'center'
    },

    subTitle: {
        color: 'white',
        textAlign: 'center',
        paddingLeft: 20,
        paddingRight: 20,
        fontSize: 14,
    }
});

export default EHint;