/**
 * Created on 12:32 2019/03/18.
 * file name EMiniEvent
 * by wangtieshan
 */

import { NativeEventEmitter, NativeModules } from "react-native";

import { EMiniNativeAPI } from './EMini';

import { isIOS, isAndroid } from '../react-native-element-core/API/EAPITool';

import { mini } from './EMini';

/*
 *  小程序原生事件监听与调用原生方法
 *  【注】所有的事件交互只是小程序的事件交互
 *  example:
 *
 *  // 调用原生方法，并传递参数
 *  // body 和 callBack 均可以不传
 *  se.event.call({
           eventName: 'hello',
           body: {age: 3, name: 'js'},
           callBack: ()=>{
                console.log('get native call back')
           }
     })

    // 注册方法，待原生调用
    let sub = se.event.register('world', (data)=>{
        console.log('get native call: world');
        console.log(data);
    });

    // 成对出现，删除观察者
    sub.remove()
 *
*/

/**
 * super element 关于与原生通信的对象
 */
export interface ESEMiniEventAPI {

    /**
     * 事件管理者
     */
    event: EMiniEventAPI;
}

export interface EMiniEventAPI {

    /**
     * 调用原生方法
     */
    call: (options: EMiniEventCallOptions) => void;

    /**
     * 注册原生的事件，等待原生调用
     * eventName: 事件名称
     * callBack: 原生调用
     * @return { remove } 调用 remove 方法，删除对原生事件的监控
     */
    register: (eventName: string, callBack: (any)) => { remove: () => void };
}

export interface EMiniEventCallOptions {

    /**
     * 调用的事件名称。对应原生注册的事件名称
     */
    eventName: string;

    /**
     * 调用指定事件时的参数
     */
    body: any;

    /**
     * 调用指定事件的回调
     */
    callBack: (any) => void;
}

export let EMiniEvent = {
    call: (options: EMiniEventCallOptions)=>{
        const { eventName, body, callBack } = options;
        const data = {
            miniId: mini.miniId,
            uuid: mini.miniUUID,
            eventName: eventName,
            body: body,
        };
        if (!callBack) {
            EMiniNativeAPI.callEvent(JSON.stringify(data));
        } else {
            EMiniNativeAPI.callEventWitchCallBack(JSON.stringify(data), callBack)
        }
    }
};

if (isIOS) {
    const nativeEventEmitter = new NativeEventEmitter(NativeModules.EMiniEventEmitter);
    /// 监控原生的调用
    EMiniEvent.register = function (eventName, callBack) {
        return nativeEventEmitter.addListener(eventName, callBack);
    };
} else if (isAndroid) {
    const nativeEventEmitter = new NativeEventEmitter();
    /// 监控原生的调用
    EMiniEvent.register = function (eventName, callBack) {
        return nativeEventEmitter.addListener(eventName, callBack);
    };
} else {
    EMiniEvent.register = function () {
        return { remove: function () {}}
    }
}
