/**
 * Created on 13:56 2018/05/13.
 * file name EMini
 * by wangtieshan
 */

/**
 * 此类为小程序的核心类。
 * 涉及到小程序启动参数、小程序跳转、小程序事件监控等等多个核心功能
 */

import { AppRegistry } from "react-native";

import { isIOS } from '../react-native-element-core/API/EAPITool';

import {
    NativeModules,
    Platform,
    processColor
} from 'react-native';
import { se } from "react-native-element";

/**
 * 小程序启动参数
 */
export interface EMiniLaunchParams {
    /**
     * 小程序id
     */
    miniId: string;
    /**
     * 小程序启动指定的页面
     */
    page: string;
    /**
     * 小程序启动时附带的参数
     */
    launchParams: any;
    /**
     * 当前小程序所依赖的原生页面的唯一id
     */
    miniUUID: string;
}

/**
 * 抓取到原生传递的参数，提取参数
 */
function extractAppLaunchParams() {

    /**
     * 重写APP启动方法，提取APP传递的参数，挂载全局
     * 提取 miniId
     * @type {*|AppRegistry.runApplication}
     */
    const o = AppRegistry.runApplication;
    AppRegistry.runApplication = (appKey: string, appParameters: any)=>{

        if (!(appParameters && appParameters.initialProps && appParameters.initialProps.miniInfo)) {throw  'can get miniId from appParameters'}

        // 安卓的启动参数采用字符串传递，所以安卓采用 JSON 解析。iOS直接就是对象
        let miniInfo = Platform.OS === 'android' ? JSON.parse(appParameters.initialProps.miniInfo) : appParameters.initialProps.miniInfo;

        // 挂载 miniId 到全局变量 se
        mini.miniId = miniInfo.miniId;
        // 挂载 page 到全局变量 se
        mini.page = miniInfo.page || 'home';
        // 挂载 miniUUID 到全局变量 se
        mini.miniUUID = miniInfo.miniUUID;
        // 挂载启动参数到全局变量 se
        if (appParameters.initialProps.params) {
            // 安卓的启动参数采用字符串传递，所以安卓采用 JSON 解析。iOS直接就是对象
            mini.launchParams = Platform.OS === 'android' ? JSON.parse(appParameters.initialProps.params) : appParameters.initialProps.params;
        } else{
            mini.launchParams = {};
        }
        if (!mini.miniId) {throw 'can get miniId from appParameters'}
        if (!mini.miniUUID) {throw 'can get miniUUID from appParameters'}

        o(appKey, appParameters);
    };
}
extractAppLaunchParams();


/**
 * 小程序原生对接API
 */
const EMiniNativeAPI = NativeModules.EMiniApi;
export { EMiniNativeAPI }

/**
 * 小程序的方法
 */
export interface ESEMiniAPI {

    /**
     * 跳转到指定小程序
     */
    jumpToMini: (options: EMiniJumpOptions) => void;

    /**
     * 关闭当前小程序
     */
    dismiss: () => void;

    /**
     * 调用原生方法获取实时的用户信息
     * 【注意】该方法为异步方法
     */
    getUserInfo: (any) => void;

    /**
     * 调用原生方法隐藏有上角的功能按钮
     * iOS专用
     */
    configFuncView: ({ hidden: boolean }) => void;

    /**
     * 配置电池栏风格 barStyle: [default, lightContent]
     * iOS专用
     */
    configStatusBar: ({ barStyle: string }) => void;

    /**
     * 是否原生页面的返回手势可以使用
     */
    edgDismiss: (enable: boolean) => void;

    /**
     * 配置原生的导航栏
     * iOS专用
     */
    configNavigationBar: ({ backTitle: string, title: string, barTintColor: string, tintColor: string, titleColor: string }) => void
}

/**
 * 小程序跳转小程序参数配置
 */
export interface EMiniJumpOptions {

    /**
     * miniId： 小程序唯一id
     */
    miniId: string;

    /**
     * page：跳转小程序的页面
     */
    page: string;

    /**
     * title：跳转的小程序的标题。非必传字段
     */
    title: string;

    /**
     * params：跳转指定小程序时附带的参数
     */
    params: any;

    /**
     * 跳转到指定小程序时的过度动画
     * present: 正常模态跳转，从底部弹出
     * push: 正常导航推出，从右侧推出
     */
    transitionStyle: string;

    /**
     * 跳转到指定小程序时关于 Debug 的配置。
     * 目前只有iOS可用
     * 是否开始 Debug 调试模式
     */
    debug: boolean;
    /**
     * 跳转到指定小程序时关于 Debug 的配置。
     * 目前只有iOS可用
     * Debug 的IP地址
     */
    debugIp: string;
    /**
     * 跳转到指定小程序时关于 Debug 的配置。
     * 目前只有iOS可用
     * Debug 的端口号
     */
    debugPort: string;

    /**
     * 跳转成功的回调
     */
    success: ()=>void;

    /**
     * 跳转失败的回调
     */
    error: (msg: string)=>void;
}

/**
 * 跳转到指定小程序
 * @param options
 */
export function jumpToMini(options: EMiniJumpOptions) {
    if (EMiniNativeAPI.jumpToMini) {
        if (!options.miniId) {
            if (options.error) {
                options.error('invalid miniId');
            }
            return;
        }
        EMiniNativeAPI.jumpToMini(JSON.stringify(options), ()=>{
            if (options.success) {
                options.success();
            }
        });
    } else {
        console.error("this platform" + Platform.OS  + "does't implement this methods")
    }
}

/**
 * 结束当前小程序
 */
export function dismiss () {
    EMiniNativeAPI.dismiss(JSON.stringify({miniId: mini.miniId, uuid: mini.miniUUID}));
}

/**
 *  获取用户信息
 */
export function getUserInfo (callBack: (any)=>void) {
    EMiniNativeAPI.getUserInfo(mini.miniId, (error, data)=>{
        callBack(JSON.parse(data));
    })
}

/**
 * 配置 funcView
 */
export function configFuncView (options: { hidden: boolean }) {
    if (!isIOS) { return; }
    let data = {
        miniId: mini.miniId,
        uuid: mini.miniUUID,
        hidden: options.hidden ? 1 : 0,
    };
    EMiniNativeAPI.configFuncView(JSON.stringify(data));
}

/*
* 配置导航
* */
export function configNavigationBar (options: { backTitle: string, title: string, barTintColor: string, tintColor: string, titleColor: string }) {
    if (!isIOS) { return; }
    const { backTitle, title, barTintColor, tintColor, titleColor } = options;
    let data = {
        miniId: mini.miniId,
        uuid: mini.miniUUID,
        barTintColor: processColor(barTintColor),
        tintColor: processColor(tintColor),
        backTitle: backTitle,
        title: title,
        titleColor: processColor(titleColor),
    };
    EMiniNativeAPI.configNavigationBar(JSON.stringify(data));
}

/*
 * 配置电池栏风格 barStyle: [default, lightContent]
*/
export function configStatusBar (options: { barStyle: string }) {
    let data = {
        miniId: mini.miniId,
        uuid: mini.miniUUID,
        barStyle: options.barStyle,
    };
    EMiniNativeAPI.configStatusBar(JSON.stringify(data));
}

/**
 * 边缘滑动消失
 */
export function edgDismiss (enable: boolean = false) {
    let data = {
        miniId: mini.miniId,
        uuid: mini.miniUUID,
        enable: enable,
    };
    EMiniNativeAPI.edgDismiss(JSON.stringify(data));
}

/**
 * mini
 * @type {{jumpToMini: jumpToMini, dismiss: dismiss, getUserInfo: getUserInfo, configFuncView: configFuncView, configStatusBar: configStatusBar, edgDismiss: edgDismiss, configNavigationBar: configNavigationBar}}
 */
export const mini: ESEMiniAPI|EMiniLaunchParams = {
    jumpToMini,
    dismiss,
    getUserInfo,
    configFuncView,
    configStatusBar,
    edgDismiss,
    configNavigationBar
};