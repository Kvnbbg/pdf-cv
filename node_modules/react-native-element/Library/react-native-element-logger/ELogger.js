/**
 * Created by wangtieshan on 2017/11/12.
 */

import {
    NativeModules,
} from 'react-native';

const NativeLogger = NativeModules.ELogger;

export const ELoggerLevel = {

    info: 'info',

    warning: 'info',

    error: 'info',

};

export class ELogger {

    static logger() {
        return this.loggerByName('ReactNative')
    }

    static loggerByName(name) {
        if (!global._private_logger_manager[name]) {
            global._private_logger_manager[name] = new ELogger(true);
        }
        return global._private_logger_manager[name];
    }

    constructor(nativeLog) {
        this.enableNativeLog = nativeLog;
    }

    // 是否可以打印
    enable: boolean = true;

    // 是否打印原生
    enableNativeLog: boolean = true;

    // 当前打印的模块
    moduleName: string = 'ReactNative';

    /*
    * 打印日志
    * native 是否关联到原生打印
    * */
    log(msg) {
        let body = {
            from: this.moduleName,
            type: ELoggerLevel.info,
            body: msg
        };
        this.jsLog(msg);
        this.nativeLog(body)
    }

    /*
    * 打印日志
    * native 是否关联到原生打印
    * */
    logError(msg) {
        let body = {
            from: this.moduleName,
            type: ELoggerLevel.error,
            body: msg
        };
        this.jsLog(msg);
        this.nativeLog(body)
    }

    /*
    * 打印日志
    * native 是否关联到原生打印
    * */
    logWarning(msg) {
        let body = {
            from: this.moduleName,
            type: ELoggerLevel.warning,
            body: msg
        };
        this.jsLog(msg);
        this.nativeLog(body)
    }

    nativeLogMessage(msg, level) {
        let body = {
            from: this.moduleName,
            type: level,
            body: msg
        };
        this.nativeLog(body)
    }

    nativeLog(body) {
        if (this.enableNativeLog && NativeLogger) {
            NativeLogger.log(JSON.stringify(body))
        }
    }

    jsLog(body) {
        if (this.enable && __DEV__) {
            console.log(body);
        }
    }
}

/// 全局的日志管理者
/// 保证即便被引用多次，也只存在一个全局管理者
if (!global._private_logger_manager) {
    global._private_logger_manager = {};

    let old_log_log = console.log;
    console.log = function (message?: any):void {
        if (__DEV__) {
            old_log_log(message);
        }
        ELogger.logger().nativeLogMessage(message, ELoggerLevel.info)
    }

    let old_log_error = console.error;
    console.error = function (message?: any):void {
        if (__DEV__) {
            old_log_error(message);
        }
        ELogger.logger().nativeLogMessage(message, ELoggerLevel.error)
    }

    let old_log_warning = console.warn;
    console.warn = function (message?: any):void {
        if (__DEV__) {
            old_log_warning(message);
        }
        ELogger.logger().nativeLogMessage(message, ELoggerLevel.warning)
    }
}

/// 保证 ELoggerShare 永远只存在一份，一次赋值
const ELoggerShare = ELogger.logger()

export { ELoggerShare }

export function ELog(msg) {
    ELoggerShare.log(msg);
}

export function ELogErr(msg) {
    ELoggerShare.logError(msg);
}

export function ELogWarning(msg) {
    ELoggerShare.logWarning(msg);
}
