/**
 * Created on 15:34 2019/03/09.
 * file name EPageBar
 * by wangtieshan
 */

import React from "react";

import {
    View,
    TouchableOpacity,
    Text,
    ColorPropType
} from 'react-native';

import PropTypes from 'prop-types';

/**
 * 页面控制器中的 bar
 */
export default class EPageBar extends React.Component {

    static propTypes = {
        /**
         * 展示的列表
         */
        list: PropTypes.arrayOf(PropTypes.string).isRequired,
        /**
         * 当前展示的位置
         */
        value: PropTypes.number,
        /**
         * 位置发生改变
         * evt.value 改变的页面索引
         */
        onValueChange: PropTypes.func,
        /**
         * 高度
         */
        height: PropTypes.number,
        /**
         * 未选中的颜色
         */
        normalColor: ColorPropType,
        /**
         * 选中的颜色
         */
        selectedColor: ColorPropType,
        /**
         * 指示器的颜色
         */
        indicatorColor: ColorPropType,
        /**
         * 指示器的宽度
         */
        indicatorWidth: PropTypes.number
    };

    static defaultProps = {
        value: 0,
        height: 44,
        list: [],
        indicatorWidth: 60
    };

    _defaultStyle = {
        alignItems: 'stretch',
        borderBottomColor: '#eeeeee',
        borderBottomWidth: 0.6,
        paddingTop: 5
    };

    /**
     * 点击了指定位置的元素
     * @param value
     * @private
     */
    _onClickItemIndex(value) {
        if (this.props.onValueChange) {
            this.props.onValueChange(value)
        }
    }

    render() {
        return (
            <View style={[this._defaultStyle, { height: this.props.height,  }, this.props.style]}>
                <View style={{ flexDirection: 'row', alignItems: 'stretch', flex: 1 }}>
                    {this._itemViews()}
                </View>
                <View style={{ flexDirection: 'row', alignItems: 'stretch' }}>
                    {this._sepViews()}
                </View>
            </View>
        )
    }

    _itemViews() {
        const list =  this.props.list;
        let result = [];
        for (let index = 0; index < this.props.list.length; index++) {
            result.push(this._renderItem(list[index], index))
        }
        return result;
    }

    _renderItem(title, index) {
        const selected = index === this.props.value;
        return (
            <TouchableOpacity
                activeOpacity={0.8}
                onPress={()=>this._onClickItemIndex(index)}
                style={{ alignItems: 'center', justifyContent: 'center', flex: 1 }}
                key={`${index}`}>
                <Text style={{ fontWeight: 'bold', fontSize: 16, color: this._renderColor(selected) }}>{ title }</Text>
            </TouchableOpacity>
        )
    }

    _renderColor(selected) {
        return selected ? this.props.selectedColor : this.props.normalColor;
    }

    _sepViews() {
        const list =  this.props.list;
        let result = [];
        for (let index = 0; index < this.props.list.length; index++) {
            result.push(this._renderSep(index))
        }
        return result;
    }

    _renderSep(index) {
        const selected = index === this.props.value;
        return (
            <View
                style={{ alignItems: 'center', flex: 1 }}
                key={`${index}`}>
                <View style={{
                    height: 2,
                    backgroundColor: this._indicatorColor(selected),
                    width: this.props.indicatorWidth
                }}/>
            </View>
        )
    }

    _indicatorColor(selected) {
        return selected ? this.props.indicatorColor : 'transparent'
    }
}
