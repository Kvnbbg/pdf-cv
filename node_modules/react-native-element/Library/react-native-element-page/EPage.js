/**
 * Created on 15:29 2019/03/05.
 * file name ChildrenTest
 * by wangtieshan
 */

import React from 'react';

import {
    View,
    ColorPropType
} from 'react-native';

import { ETheme } from '../react-native-element-core/theme';

import EPageBar from './EPageBar';

import EPageItem from './EPageItem';

import PropTypes from 'prop-types';

/*
 页面控制器
 含有一个 EPageBar，控制多个页面之间的切换
 只能接受 EPageItem 作为子节点
 每个页面的内容在 EPageItem 中描绘

 Example:
 <EPage>
    <EPageItem>
        <Text style={{ backgroundColor: 'red' }}>Page1</Text>
    </EPageItem>
    <EPageItem>
        <Text>center</Text>
        <Text>center1</Text>
        <Text>center2</Text>
    </EPageItem>
 </EPage>
 */

class EPage extends React.Component {

    /*
     * 默认属性
     */
    static defaultProps = {
        value: 0,
        normalColor: 'gray',
        selectedColor: 'black',
        indicatorColor: ETheme.color.main,
        indicatorWidth: 40,
        pageBarHeight: 44
    };

    /*
     * 属性
     */
    static propTypes = {
        /**
         * 默认索引。第一次加载的索引。只在第一次加载时有效，其他设置无效。默认: 0
         */
        value: PropTypes.number,
        /**
         * 获取手动更改内部索引的方法
         * eg: <EPage changeValueMethod={method => this.pageChangeMethod = method}></EPage>
         *
         * 跳转到索引为 2 的页面
         * this.pageChangeMethod(2)
         */
        changeValueMethod: PropTypes.func,
        /**
         * 位置发生改变
         * evt.value 改变的页面索引
         */
        onValueChange: PropTypes.func,
        /**
         * 未选中的颜色
         */
        normalColor: ColorPropType,
        /**
         * 选中的颜色
         */
        selectedColor: ColorPropType,
        /**
         * page bar 高度
         */
        pageBarHeight: PropTypes.number,
        /**
         * 指示器颜色
         */
        indicatorColor: ColorPropType,
        /**
         * 指示器的宽度
         */
        indicatorWidth: PropTypes.number
    };

    /*
     * CSS 配置
     */
    defaultStyle = {
        backgroundColor: 'white',
        flex: 1,
        justifyContent: 'center',
        alignItems: 'stretch'
    };

    constructor(props) {
        super(props);
        this.state = {
            value: props.value
        };
        if (this.props.changeValueMethod) {
            this.props.changeValueMethod(value => this._changeToIndex(value))
        }
    }

    /**
     * 切换到指定位置
     * @param value 指定的位置
     * @private
     */
    _changeToIndex(value: number) {
        this.setState({
            value: value
        });
        this.props.onValueChange && this.props.onValueChange(value)
    }

    render() {
        return (
            <View style={ [ this.defaultStyle, this.props.style ] }>
                <EPageBar
                    height={this.props.pageBarHeight}
                    indicatorColor={this.props.indicatorColor}
                    indicatorWidth={this.props.indicatorWidth}
                    selectedColor={this.props.selectedColor}
                    normalColor={this.props.normalColor}
                    onValueChange={value=>this._changeToIndex(value)}
                    list={this.getPageBarTitles()}
                    value={this.state.value}/>
                { this.getChildren() }
            </View>
        )
    }

    getPageBarTitles() {
        let children = this.getPageItemChildren();
        if (!children.length) { return []; }
        let labels = [];
        for (let index = 0; index < children.length; index++) {
            labels.push(children[index].props.label)
        }
        return labels;
    }

    /*
     * 获取子节点
     */
    getChildren() {
        let children = this.getPageItemChildren();
        if (!children.length) { return }
        let result = [];
        for (let index = 0; index < children.length; index++) {
            let element = children[index];
            const s = index === this.state.value ? {} : { display: 'none' };
            result.push(
                <EPageItem label={element.props.label} key={index} style={ [ s ] }>
                    { element.props.children }
                </EPageItem>
            );
        }
        return result
    }

    /*
     * 获取合法的子节点，只支持 EPageItem
     */
    getPageItemChildren() {
        if (!this.props.children) {
            return []
        }
        if (this.props.children.hasOwnProperty('length')) {
            let result = [];
            for (let item of this.props.children) {
                if (item.hasOwnProperty('type') && item.type.name === 'EPageItem') {
                    result.push(item)
                }
            }
            return result;
        } else {
            if (this.props.children.hasOwnProperty('type') && this.props.children.type.name === 'EPageItem') {
                return [this.props.children]
            }
        }
    }
}

export { EPage, EPageBar, EPageItem }