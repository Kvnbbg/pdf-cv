/**
 * Created by wangtieshan on 2017/11/2.
 */

import React, { Component } from 'react';

import PropTypes from 'prop-types';

import {
    TouchableOpacity,
    Text,
    Modal,
    StyleSheet,
    Animated,
    Easing,
    Platform,
    Dimensions,
} from 'react-native';
import {EAlertButtonType} from "../react-native-element-alert/EAlertTool";

const screenHeight = Dimensions.get('window').height;

export interface EAlertSheetOptions {
    /**
     * 弹框标题
     */
    title: string,
    /**
     * 弹框内容
     */
    message: string,
    /**
     * 按钮
     */
    buttons: EAlertSheetButtonType[],
    /**
     * 点击回调
     */
    onSelected: (index: number)=>void,
}

export type EAlertSheetButtonType = {
    /**
     * 文案
     */
    text: string;
    /**
     * 文案 CSS
     */
    textStyle?: {};
}

Object.assign(Component.prototype, {

    alertSheetView() {
        if (!this.state) {
            this.state = {};
        }
        if (!this.state.sheet) {
            this.state.sheet = {show: false};
        }
        return (
            <EAlertSheet title={this.state.sheet.title}
                           message={this.state.sheet.message}
                           buttons={this.state.sheet.buttons}
                           visible={this.state.sheet.show}
                           onCancel={() => {
                               let sheet = this.state.sheet;
                               sheet.show = false;
                               this.setState({
                                   sheet: sheet
                               });
                           }}
                           onClick={(index) => {
                               let sheet = this.state.sheet;
                               sheet.show = false;
                               this.setState({
                                   sheet: sheet
                               });
                               this.state.sheet.onClick(index)
                           }}
            />
        )
    },

    /**
     * sheet alert
     * @param options EAlertSheetOptions
     */
    alertSheet(options: EAlertSheetOptions) {
        const {title, message, buttons, onClick, onSelected} = options;
        let show = (!!(title || message));
        this.setState({
            sheet: {
                show: show,
                title: title,
                buttons: buttons,
                message: message,
                onClick: (index)=>{
                    onSelected && onSelected(index);
                    // 兼容老版本回调
                    onClick && onClick({tapIndex: index})
                },
            }
        });
    }
});

export default class EAlertSheet extends Component {

    static defaultProps = {
        visible: true,
    };

    static propTypes = {
        title: PropTypes.string,
        message: PropTypes.string,
        buttons: PropTypes.array,
        onClick: PropTypes.func,
        onCancel: PropTypes.func.isRequired,
    };

    selectedAtIndex: number = null;

    constructor(props) {
        super(props);
        this.state = {
            bottomAnim: new Animated.Value(-500),
        }
    }

    componentDidMount() {
        this.selectedAtIndex = null;
        this.state.bottomAnim = new Animated.Value(-screenHeight);
        if (this.props.visible) {
            Animated.timing(
                this.state.bottomAnim,
                {
                    toValue: 0,
                    duration: 250,
                    easing: Easing.linear
                }
            ).start();
        }
    }

    componentWillReceiveProps(props) {
        this.state.bottomAnim = new Animated.Value(-500);
        if (props.visible) {
            Animated.timing(
                this.state.bottomAnim,
                {
                    toValue: 0,
                    duration: 250,
                    easing: Easing.linear
                }
            ).start();
        }
    }

    _buttonsView() {
        let result = [];
        for (let index in this.props.buttons) {
            let intIndex = parseInt(index);
            let btn = this.props.buttons[intIndex];
            result.push(this.cellView(btn.text, intIndex, {}, btn.textStyle, ()=>{
                if (Platform.OS === 'ios') {
                    this.selectedAtIndex = intIndex;
                    this._onCancel();
                } else {
                    this.props.onClick(intIndex);
                }
            }))
        }
        return result;
    }

    cellView(text, index, style, textStyle, onPress) {
        return (
            <TouchableOpacity activeOpacity={0.8} key={index} style={[styles.cell, style]} onPress={onPress}>
                <Text style={[styles.text, textStyle]}>{text}</Text>
            </TouchableOpacity>
        )
    }

    _onCancel() {
        if (this.props.onCancel) {
            this.props.onCancel();
        }
    }

    _messageView() {
        if (this.props.message) {
            return <Text style={[styles.message, {paddingTop: this.props.title ? 0 : 15,}]}>{this.props.message}</Text>
        }
    }

    _titleView() {
        if (this.props.title) {
            return <Text style={[styles.title,]}>{this.props.title}</Text>
        }
    }

    _onDismiss() {
        if (this.props.onClick && (typeof (this.selectedAtIndex) == 'number') && this.selectedAtIndex >= 0) {
            this.props.onClick(this.selectedAtIndex);
        }
        this.selectedAtIndex = null;
    };

    render() {
        return (
            <Modal {...this.props}
                   visible={this.props.visible}
                   transparent={true}
                   onRequestClose={()=>{this._onCancel()}}
                   onDismiss={()=>{this._onDismiss()}}
                   animationType={'fade'}>
                <TouchableOpacity style={[styles.bgView]}
                                  onPress={()=>{
                                      this.selectedAtIndex = null;
                                      this._onCancel()}}
                                  activeOpacity={1}>
                    <Animated.View style={[styles.bottomView, {bottom: this.state.bottomAnim}]} onPress={()=>{}}>
                        {this._titleView()}
                        {this._messageView()}
                        {this._buttonsView()}
                        {this.cellView('取消', 100, {marginTop: 8},{}, ()=>{
                            this.selectedAtIndex = null;
                            this._onCancel()})
                        }
                    </Animated.View>
                </TouchableOpacity>
            </Modal>
        )
    }

}

const styles = StyleSheet.create({
    bgView: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        top: 0,
        backgroundColor: '#00000066',
        justifyContent: 'flex-end',
        alignItems: 'stretch',
    },
    bottomView: {
        backgroundColor: '#EEEEEE',
        justifyContent: 'flex-end',
        alignItems: 'stretch',
        position: 'absolute',
        left: 0,
        right: 0,
    },
    cell: {
        height: 44,
        backgroundColor: 'white',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 1,
    },
    text: {
        fontSize: 18,
        color: 'black',
    },
    message: {
        color: 'gray',
        fontSize: 13,
        paddingHorizontal: 15,
        paddingBottom: 15,
        backgroundColor: 'white',
        textAlign: 'center',
    },
    title: {
        fontSize: 14,
        fontWeight: '500',
        textAlign: 'center',
        color: 'black',
        backgroundColor: 'white',
        paddingTop: 15,
        paddingBottom: 15,
    }
});
