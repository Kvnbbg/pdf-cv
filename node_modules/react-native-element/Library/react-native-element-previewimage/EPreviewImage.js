/**
 * Created by wangtieshan on 2017/10/18.
 */

import React, { Component } from 'react';

import {
    Modal,
    View,
    Text,
    StyleSheet,
    ScrollView,
    TouchableOpacity
} from 'react-native';

import {
    screenSize
} from '../react-native-element-core/API/EAPITool';

import EImage from '../react-native-element-core/EImage';

import PropTypes from 'prop-types';

import { EPreviewImageItem } from './ENativePreviewImage';

export default class EPreviewImage extends Component {

    static propTypes = {
        /**
         * 图片列表 EPreviewImageItem[]
         */
        imageItems: PropTypes.array,
        /**
         * 当前预览的图片标识
         */
        currentUUID: PropTypes.string,
        /**
         * 是否展示
         */
        visible: PropTypes.bool,
        /**
         * 顶部导航标题颜色
         */
        titleColor: PropTypes.string,
        /**
         * 顶部导航颜色
         */
        barTintColor: PropTypes.string,
        /**
         * 取消时的回调
         */
        onCancel: PropTypes.func,
    };

    scrollView = null;

    constructor(props) {
        super(props);
        this.state = {
            itemWidth: screenSize.width
        };
    }

    componentDidMount() {
        this.scrollTo(this.props.currentUUID, false)
    }

    componentWillReceiveProps(props) {
        this.scrollTo(props.currentUUID, false)
    }

    scrollTo(uuid: string, animated: boolean = true) {
        if (this.scrollView) {
            this.scrollView.scrollTo({ x: this._getUUIDIndex(uuid) * this.state.itemWidth, animated: animated });
        }
    }

    _getUUIDIndex(uuid): number {
        if (!uuid) { return 0 }
        const index = this._getUUIDs().indexOf(uuid);
        return index === -1 ? 0 : index;
    }
    
    _getUUIDs(): string[] {
        let result = [];
        for (let item of this.props.imageItems) {
            if (item.uuid) {
                result.push(item.uuid)
            }
        }
        return result;
    }
    
    render() {
        return (
            <Modal transparent={false} visible={this.props.visible} onRequestClose={()=>{this.props.onCancel()}}>
                <View style={styles.body}>
                    <ScrollView style={styles.scroll}
                                ref={(scrollView)=>{
                                    this.scrollView = scrollView;
                                    this.scrollTo(this.props.currentUUID, false)
                                }}
                                showsHorizontalScrollIndicator={false}
                                pagingEnabled={true}
                                horizontal={true}
                                contentContainerStyle={{alignItems: 'stretch'}}>
                        {this._itemsView()}
                    </ScrollView>
                </View>
            </Modal>
        )
    }

    _itemsView() {
        let items: EPreviewImageItem[] = this.props.imageItems || [];
        if (items.length) {
            let result = [];
            for (let index = 0; index < items.length; index++) {
                result.push(this._getItem(items[index], items[index].uuid));
            }
            return result
        }
    }

    _getItem(item: EPreviewImageItem, index: string) {
        return (
            <EPreviewImageItemView
                uuid={index}
                key={index}
                item={item}
                onPress={()=>{ this.props.onCancel && this.props.onCancel() }}/>
        )
    }

}

class EPreviewImageItemView extends Component {

    constructor(props) {
        super(props);
        this.state = {
            error: false,
        }
    }

    render() {
        let item: EPreviewImageItem = this.props.item;
        let failStyle = [styles.fail];
        if (!this.state.error) {
            failStyle.push(styles.hidden);
        }
        return (
            <TouchableOpacity style={{width: screenSize.width, alignItems: 'stretch', justifyContent: 'center',}}
                              activeOpacity={1}
                              onPress={this.props.onPress}>
                <EImage style={[styles.image]}
                        contentMode={'contain'}
                        source={{ uri: item.path }}
                        onError={()=>{
                            this.setState({
                                error: true,
                            })
                        }}/>
                <View style={[styles.bar, !item.title && styles.hidden]}>
                    <Text style={styles.barTitle}>{item.title}</Text>
                </View>
                <Text style={failStyle}>图片加载失败</Text>
            </TouchableOpacity>
        )
    }
}

const styles = StyleSheet.create({
    body: {
        flex: 1,
        alignItems: 'stretch',
        backgroundColor: 'black'
    },
    scroll: {
        flex: 1,
    },
    image: {
        position: 'absolute',
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        marginLeft: 5,
        marginRight: 5,
    },
    bar: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        height: 44,
        backgroundColor: '#222222CC',
        justifyContent: 'center',
        alignItems: 'center',
    },
    barTitle: {
        backgroundColor: 'transparent',
        color: '#ffffff',
        fontSize: 17,
    },
    fail: {
        backgroundColor: 'transparent',
        color: 'white',
        fontSize: 16,
        textAlign: 'center',
    },
    hidden: {
        display: 'none',
    }
});