/**
 * Created on 12:30 2018/08/14.
 * file name EPickerView
 * by wangtieshan
 */

import React, {Component} from 'react';

import {
    View,
    Picker,
    Modal,
    TouchableOpacity,
    Text,
    StyleSheet,
    Dimensions,
    FlatList,
} from 'react-native';

import PropTypes from 'prop-types';

export interface EPickerViewOptions {
    /*选中项*/
    selectedValue: string,
    /*项目*/
    items: string[],
    /*提示语*/
    prompt: string,
    /*选中回调*/
    onSelectedValue: (value: string)=>void,
}

Object.assign(Component.prototype, {

    pickerView() {
        if (!this.state) {
            this.state = {};
        }
        if (!this.state.picker) {
            this.state.picker = {visible: false};
        }
        return (
            <EPickerView
                {...this.state.picker}
                onNeedDismiss={()=>{
                    let sheet = this.state.picker;
                    sheet.visible = false;
                    this.setState({
                        picker: sheet
                    });
                }}/>
        )
    },

    /**
     * pick
     * @param options EPickerViewOptions
     */
    pick(options: EPickerViewOptions) {
        this.setState({
            picker: {
                ...options,
                visible: true,
            }
        });
    }
});

export default class EPickerView extends React.Component {

    static defaultProps = {
        visible: false,
        onSelectedValue: ()=>{},
        prompt: '请选择：',
        items: [],
        selectedValue: null,
        rowHeight: 44,
    };

    static propTypes = {
        /*是否展示*/
        visible: PropTypes.bool.isRequired,
        /*已经选中项*/
        selectedValue: PropTypes.string,
        /*项目*/
        items: PropTypes.array.isRequired,
        /*选中回调*/
        onSelectedValue: PropTypes.func.isRequired,
        /*当需要消失时的回调*/
        onNeedDismiss: PropTypes.func.isRequired,

        /*提示语*/
        prompt: PropTypes.string,
        /*行高*/
        rowHeight: PropTypes.number,
    };

    screenWidth: number = Dimensions.get('window').width;

    screenHeight: number = Dimensions.get('window').height;

    /*临时存储数据*/
    tmpSelected: string;

    constructor(props) {
        super(props);
        this.state = {
            selected: props.selectedValue || (props.items.length > 0 ? props.items[0] : null),
            data: props.items,
        };
    }

    componentWillReceiveProps(props) {
        this.setState({
            selected: props.selectedValue || (props.items.length > 0 ? props.items[0] : null),
            data: props.items,
        })
    }

    _onSelected(item) {
        this._onNeedDismiss();
        this.props.onSelectedValue(item);
    }

    _onNeedDismiss() {
        this.props.onNeedDismiss()
    }

    _containerSize(): {width: number, height: number} {
        let items = this.props.items || [];
        let height = Math.min(items.length * this.props.rowHeight + (this._hasPrompt() ? this.props.rowHeight : 0), this.screenHeight - 2 * 90);
        let width = this.screenWidth - 2 * 40;
        return {width: width, height: height}
    }

    _hasPrompt(): boolean {
        return this.props.prompt;
    }

    render() {
        return (
            <Modal transparent={true}
                   animationType={'fade'}
                   visible={this.props.visible}
                   onRequestClose={()=>this._onNeedDismiss()}>
                <TouchableOpacity style={styles.body}
                                  activeOpacity={1}
                                  onPress={()=>this._onNeedDismiss()}>
                    <View style={[styles.container, this._containerSize()]}>
                        {this._renderHeader()}
                        <FlatList style={{flex: 1,}}
                                  data={this.state.data}
                                  keyExtractor={(item: ItemT, index: number) => index}
                                  extraData={this.state}
                                  renderItem={(item) => {return this._renderItems(item)}}/>
                    </View>
                </TouchableOpacity>
            </Modal>
        )
    }

    _renderItems({item, index}) {
        let display = index === this.props.items.length - 1 ? {display: 'none'} : {};
        return (
            <TouchableOpacity style={[{height: this.props.rowHeight, justifyContent: 'center', }]} onPress={()=>{this._onSelected(item)}}>
                <Text style={{fontSize: 15, marginLeft: 15, color: 'black',}}>{item}</Text>
                <View style={[{height: 0.5, backgroundColor: '#eee', position: 'absolute', left: 0, right: 0, bottom: 0,}, display]}/>
            </TouchableOpacity>
        )
    }
    _renderHeader() {
        if (!this._hasPrompt()) {
            return
        }
        return (
            <View style={[{height: this.props.rowHeight, justifyContent: 'center', borderColor: '#eee', elevation: 3, backgroundColor: 'white',}]}>
                <Text style={{fontSize: 17, marginLeft: 15, color: 'black', }}>{this.props.prompt}</Text>
                <View style={[{height: 0.5, backgroundColor: '#eee', position: 'absolute', left: 0, right: 0, bottom: 0,},]}/>
            </View>
        )
    }
}

const styles = StyleSheet.create({
    body: {
        flex: 1,
        backgroundColor: '#00000088',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        backgroundColor: 'white',
        borderRadius: 4,
        overflow: 'hidden',
    }
});