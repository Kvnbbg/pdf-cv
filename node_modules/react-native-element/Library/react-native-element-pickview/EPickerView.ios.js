/**
 * Created on 12:30 2018/08/14.
 * file name EPickerView
 * by wangtieshan
 */

import React, {Component} from 'react';

import {
    View,
    Picker,
    Modal,
    TouchableOpacity,
    Text,
    StyleSheet,
} from 'react-native';

import PropTypes from 'prop-types';

export interface EPickerViewOptions {
    /*选中项*/
    selectedValue: string,
    /*项目*/
    items: string[],
    /*提示语*/
    prompt: string,
    /*选中回调*/
    onSelectedValue: (value: string)=>void,
}

Object.assign(Component.prototype, {

    pickerView() {
        if (!this.state) {
            this.state = {};
        }
        if (!this.state.picker) {
            this.state.picker = {visible: false};
        }
        return (
            <EPickerView
                {...this.state.picker}
                onNeedDismiss={()=>{
                    let sheet = this.state.picker;
                    sheet.visible = false;
                    this.setState({
                        picker: sheet
                    });
                }}/>
        )
    },

    /**
     * pick
     * @param options EPickerViewOptions
     */
    pick(options: EPickerViewOptions) {
        this.setState({
            picker: {
                ...options,
                visible: true,
            }
        });
    }
});

export default class EPickerView extends React.Component {

    static defaultProps = {
        visible: false,
        onSelectedValue: ()=>{},
        prompt: '请选择',
        items: [],
        selectedValue: null,
    };

    static propTypes = {
        /*是否展示*/
        visible: PropTypes.bool.isRequired,
        /*已经选中项*/
        selectedValue: PropTypes.string,
        /*项目*/
        items: PropTypes.array.isRequired,
        /*选中回调*/
        onSelectedValue: PropTypes.func.isRequired,
        /*当需要消失时的回调*/
        onNeedDismiss: PropTypes.func.isRequired,

        /*提示语*/
        prompt: PropTypes.string,
    };

    /*临时存储数据*/
    tmpSelected: string;

    constructor(props) {
        super(props);
        this.state = {
            selected: props.selectedValue || (props.items.length > 0 ? props.items[0] : null),
        };
    }

    componentWillReceiveProps(props) {
        this.setState({
            selected: props.selectedValue || (props.items.length > 0 ? props.items[0] : null),
        })
    }

    _onValueChanged(selected: string) {
        this.setState({
            selected: selected,
        })
    }

    _onEnsure() {
        this.tmpSelected = this.state.selected;
        this._onNeedDismiss();
    }

    _onDismissed() {
        if (this.tmpSelected) {
            this.props.onSelectedValue(this.tmpSelected);
            this.tmpSelected = null;
        }
    }

    _onCancel() {
        this.state.selected = null;
        this._onNeedDismiss();
    }

    _onNeedDismiss() {
        this.props.onNeedDismiss()
    }

    render() {
        return (
            <Modal transparent={true}
                   animationType={'slide'}
                   visible={this.props.visible}
                   onDismiss={()=>{this._onDismissed()}}
                   onRequestClose={()=>this._onNeedDismiss()}>
                <TouchableOpacity style={styles.body}
                                  activeOpacity={1}
                                  onPress={()=>this._onNeedDismiss()}>
                    <TouchableOpacity style={styles.barStyle} activeOpacity={1}>
                        <TouchableOpacity style={{justifyContent: 'center',}} onPress={()=>this._onCancel()}>
                            <Text style={{color: 'black', fontSize: 16, marginLeft: 20,}}>取消</Text>
                        </TouchableOpacity>
                        <View style={{flex: 1, justifyContent: 'center', alignItems: 'stretch',}}>
                            <Text style={{color: 'gray', fontSize: 16, textAlign: 'center',}}>{ this.props.prompt }</Text>
                        </View>
                        <TouchableOpacity style={{justifyContent: 'center',}} onPress={()=>{this._onEnsure()}}>
                            <Text style={{color: 'black', fontSize: 16, marginRight: 20,}}>确定</Text>
                        </TouchableOpacity>
                    </TouchableOpacity>
                    <Picker style={[{backgroundColor: 'white', }, this.props.style]}
                        prompt={'请选择'}
                        mode={'dialog'}
                        selectedValue={this.state.selected}
                        onValueChange={(selected) => this._onValueChanged(selected)}>
                        {this._getItems()}
                    </Picker>
                </TouchableOpacity>
            </Modal>
        )
    }

    _getItems() {
        let result = [];
        for (let item of this.props.items) {
            result.push(<Picker.Item label={item} value={item} key={item}/>)
        }
        return result;
    }
}

const styles = StyleSheet.create({
    body: {
        flex: 1,
        backgroundColor: 'transparent',
        justifyContent: 'flex-end',
        alignItems: 'stretch',
        shadowOffset: {height: -3,},
        shadowColor: 'gray',
        shadowOpacity: 0.1,
    },
    barStyle: {
        height: 40,
        flexDirection: 'row',
        backgroundColor: 'white',
        shadowOffset: {height: 3,},
        shadowColor: '#eee',
        shadowOpacity: 0.5,
        zIndex: 100,
    },
});