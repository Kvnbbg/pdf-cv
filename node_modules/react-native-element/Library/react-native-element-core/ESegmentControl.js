/**
 * Created on 10:19 2019/03/13.
 * file name ESegmentControl
 * by wangtieshan
 */

import React from 'react';

import PropTypes from 'prop-types';

import {
    View,
    ColorPropType
} from 'react-native';

import { ETheme } from './theme';

import { EButton } from './EButton';

/**
 * segment control
 */
export class ESegmentControl extends React.Component {

    static propTypes = {

        /**
         * 样式。default: round
         * plain: 镂空，含有边框，背景透明
         * round: 圆角
         */
        type: PropTypes.oneOf(['plain', 'round']),

        /**
         * 选中回调
         * ({ item: {}, index: number })=>void
         */
        onSelected: PropTypes.func,

        /**
         * 已经选中的值
         * 当 list 为 对象列表时，此值为 listKey 对应的值
         */
        value: PropTypes.string,

        /**
         * 禁用条目列表
         */
        disableKeys: PropTypes.arrayOf(PropTypes.string),

        /**
         * 数据源
         * 支持字符串列表，将会直接展示
         * 支持对象列表。默认取对象 code 作为唯一标识，取 name 为展示文案
         * * 可以通过指定 listKey 指定唯一标识字段取值字段
         * * 可以通过指定 listValue 指定展示文案取值字段
         */
        list: PropTypes.oneOfType([
            PropTypes.arrayOf(PropTypes.string),
            PropTypes.arrayOf(PropTypes.object),
            ]
        ).isRequired,

        /**
         * 当 list 为对象集合时，此字段指定对象唯一标示取值字段
         */
        listKey: PropTypes.string,

        /**
         * 当 list 为对象集合时，此字段指定对象展示文案取值字段
         */
        listValue: PropTypes.string,

        /**
         * 每个条目最小宽度
         */
        minWidth: PropTypes.number,

        /**
         * 高度
         */
        height: PropTypes.number,

        /**
         * 条目内部，在横向的 padding，用来做文本到边缘的距离
         */
        itemPaddingHorizontal: PropTypes.number,

        /**
         * 条目两两相互之间的间隔
         * 当type为 round 时，默认 20
         * 当type为 plain 时，默认 0
         */
        itemBetweenPadding: PropTypes.number,

        /**
         * item未选中下的颜色
         * type: plain 下，此颜色无用
         * type: round 下，为背景颜色
         */
        normalColor: ColorPropType,

        /**
         * item选中下的颜色
         * type: plain 下，为边框颜色和文本颜色和按钮点击的渐变色
         * type: round 下，为背景颜色
         */
        selectedColor: ColorPropType,

        /**
         * item不可用下的颜色
         * type: plain 下，无效
         * type: round 下，为背景颜色
         */
        disabledColor: ColorPropType,

        /**
         * 文本颜色
         */
        textColor: ColorPropType,

        /**
         * 选中文本颜色
         */
        selectedTextColor: ColorPropType,

        /**
         * 各种不可用状态下的文字的颜色。例如：按钮不可用下文本颜色
         */
        disabledTextColor: PropTypes.string,

        /**
         * 条目圆角切割
         * 当 type 为 plain 时，生效，默认为 4
         * 当 type 为 round 时，此字段无效
         */
        borderRadius: PropTypes.number,

        /**
         * 条目边框宽度
         * 当 type 为 plain 时，生效，默认为 1
         * 当 type 为 round 时，此字段无效
         */
        borderWidth: PropTypes.number
    };

    static defaultProps = {
        listKey: 'code',
        listValue: 'name',
        borderRadius: 8,
        type: 'plain',
        borderWidth: 1,
        normalColor: '#c6c6c6',
        selectedColor: ETheme.color.main,
        textColor: 'black',
        selectedTextColor: ETheme.color.textColorMatchMain,
        disabledTextColor: ETheme.color.disabledTextColor,
        disabledColor: ETheme.color.disabledColor,
        itemPaddingHorizontal: 10,
        itemBetweenPadding: 12,
        minWidth: 70,
        height: 30,
    };

    _onPress(item, index) {
        this.props.onSelected && this.props.onSelected({item, index})
    }

    render() {
        return (
            <View style={[{ flexDirection: 'row', alignItems: 'center' }, this.props.style]}>
                {this._listViews()}
            </View>
        )
    }

    _listViews() {
        const selectedKey = this.props.value;
        const list = this.props.list || [];
        const disableList = this.props.disableKeys || [];
        if (!list.hasOwnProperty('length') || !list.length || !disableList.hasOwnProperty('length')) {
            return
        }
        let views = [];
        const length = list.length;
        for (let index = 0; index < length; index++) {
            const item = list[index];
            const key = ESegmentControl._gk(item);
            const value = ESegmentControl._gv(item);
            if (key && value) {
                views.push(this._listItem({
                    item,
                    key,
                    value: value,
                    index,
                    length,
                    disableList,
                    selectedKey
                }));
            }
        }
        return views;
    }

    _listItem(config) {
        if (this.props.type === 'plain') {
            return this._plainListItem(config)
        }
        if (this.props.type === 'round') {
            return this._roundListItem(config)
        }
    }

    _roundListItem(config) {
        const { item, key, value, index, length, disableList, selectedKey } = config;
        const disable = disableList.indexOf(key) !== -1;
        const selected = selectedKey === key;
        const paddingLeft = index === 0 ? 0 : this.props.itemBetweenPadding;
        return (
            <EButton
                onPress={()=>(!disable && this._onPress(item, index))}
                maskOpacity={disable ? 0 : 0.1}
                containerStyle={{ paddingHorizontal: this.props.itemPaddingHorizontal }}
                key={key}
                title={value}
                fontSize={ETheme.font.size.base}
                color={disable ? this.props.disabledTextColor : (selected ? this.props.selectedTextColor : this.props.textColor )}
                style={[{ backgroundColor: disable ? this.props.disabledColor : (selected ? this.props.selectedColor : this.props.normalColor),
                    minWidth: this.props.minWidth,
                    height: this.props.height,
                    marginLeft: paddingLeft}]}
                borderConfig={{ borderRadius: this.props.height / 2.0 }}/>
        )
    }

    _plainListItem(config) {
        const { item, key, value, index, length, disableList, selectedKey } = config;
        const disable = disableList.indexOf(key) !== -1;
        const selected = selectedKey === key;
        let borderConfig = {};
        // 第一个
        if (index === 0) {
            borderConfig = {
                borderTopWidth: this.props.borderWidth,
                borderLeftWidth: this.props.borderWidth,
                borderBottomWidth: this.props.borderWidth,
                borderTopLeftRadius: this.props.borderRadius,
                borderBottomLeftRadius: this.props.borderRadius,
                borderColor: this.props.selectedColor
            }
        } else { // 中间的条目
            borderConfig = {
                borderTopWidth: this.props.borderWidth,
                borderLeftWidth: this.props.borderWidth,
                borderBottomWidth: this.props.borderWidth,
                borderColor: this.props.selectedColor
            }
        }
        // 最后一个
        if (index === length - 1) {
            borderConfig.borderRightWidth = this.props.borderWidth;
            borderConfig.borderTopRightRadius = this.props.borderRadius;
            borderConfig.borderBottomRightRadius = this.props.borderRadius;
        }
        return (
            <EButton
                onPress={()=>(!disable && this._onPress(item, index))}
                maskColor={this.props.selectedColor}
                maskOpacity={disable ? 0 : 0.1}
                containerStyle={{ paddingHorizontal: this.props.itemPaddingHorizontal }}
                key={key}
                title={value}
                fontSize={ETheme.font.size.base}
                color={disable ? this.props.disabledTextColor : (selected ? this.props.selectedTextColor : this.props.textColor )}
                style={[{ backgroundColor: selected ? this.props.selectedColor : 'transparent',
                    minWidth: this.props.minWidth,
                    height: this.props.height }]}
                borderConfig={borderConfig}/>
        )
    }

    static _gv(item): string {
        if (typeof item === 'string') {
            return item
        }
        if (typeof item === 'object') {
            return item[this.props.listValue]
        }
        return null;
    }

    static _gk(item): string {
        if (typeof item === 'string') {
            return item
        }
        if (typeof item === 'object') {
            return item[this.props.listKey]
        }
        return null;
    }
}