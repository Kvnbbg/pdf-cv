//
//  EMiniTool.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/13.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniTool.h"
#import <React/RCTUtils.h>

const NSString * EMiniLogNotificationName = @"EMiniLogNotificationName";

void EMiniLog(NSString * msg) {
    NSString * str = [NSString stringWithFormat:@"小程序日志：%@",msg];
#if DEBUG
    @try {
        NSLog(str);
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
#endif
    [[NSNotificationCenter defaultCenter] postNotificationName:EMiniLogNotificationName object:str];
}

void EMiniMainSafe(void(^block)()) {
    if ([NSThread currentThread].isMainThread) {
        block();
    } else {
        EMiniMainAsync(block);
    }
}

void EMiniMainAsync(void(^block)()) {
    dispatch_async(dispatch_get_main_queue(), block);
}

void EMiniMainAfter(double after, void(^block)()) {
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(after * NSEC_PER_SEC)), dispatch_get_main_queue(), block);
}

@implementation EMiniTool

+(UIViewController *)topViewController {
    return RCTPresentedViewController();
}

+(NSString *)errorStringWithError: (NSError *)error {
    return [self objToString:[self errorWithError:error]];
}

+(NSString *)errorStringWithDesck: (NSString *)desc {
    return [self objToString:[self errorWithDesc:desc]];
}

+(NSDictionary *)errorWithError: (NSError *) error {
    return [self descWith: [[NSError alloc] initWithDomain:@"com.kkmini.error" code:error.code userInfo: error.userInfo]];
}

+(NSDictionary *)errorWithDesc: (NSString *) desc {
    return [self descWith: [[NSError alloc] initWithDomain:@"com.kkmini.error" code:500 userInfo: @{@"NSLocalizedDescription": desc}]];
}

+(NSDictionary *)descWith: (NSError *)error {
    NSInteger code = error.code;
    NSString * desc = error.localizedDescription;
    return @{
             @"code": @(code),
             @"message": desc,
             };
}

+(id)stringToObject: (NSString * )str {
    if (!str) {
        return nil;
    }
    return [NSJSONSerialization JSONObjectWithData:[str dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingAllowFragments error:nil];
}

+(NSString *)objToString:(id)obj {
    if (!obj) {
        return nil;
    }
    if ([obj isKindOfClass:[NSString class]]) {
        return obj;
    }
    if ([obj isKindOfClass:[NSData class]]) {
        return [[NSString alloc] initWithData:obj encoding:NSUTF8StringEncoding];
    }
    @try {
        NSError * error;
        NSData * data = [NSJSONSerialization dataWithJSONObject:obj options:NSJSONWritingPrettyPrinted error:&error];
        if (error) {
            return nil;
        }
        if (data) {
            return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
        }
        return nil;
    } @catch (NSException *exception) {
        return nil;
    } @finally {
        
    }
}

+(void)logInfo:(NSString *)msg {
    EMiniLog([NSString stringWithFormat:@"--info--%@", msg]);
}

+(void)logError:(NSString *)msg {
    EMiniLog([NSString stringWithFormat:@"--error--%@", msg]);
}

+(void)logWarning:(NSString *)msg {
    EMiniLog([NSString stringWithFormat:@"--warning--%@", msg]);
}

+(NSString *)realSandBoxPath:(NSString * )path {
    return [NSHomeDirectory() stringByAppendingPathComponent:path];
}
@end

@implementation EMiniWeakObject

- (instancetype)init: (id) obj
{
    self = [super init];
    if (self) {
        self.obj = obj;
    }
    return self;
}
@end
