//
//  EMiniUpdateQueue.m
//  Pods
//
//  Created by 王铁山 on 2018/6/28.
//
//

#import "EMiniUpdateQueue.h"

@interface EMiniUpdateQueue()
{
    BOOL _isOn;
    BOOL _hasObserver;
}
@property(nonatomic, strong) NSMutableArray * managers;

@end

@implementation EMiniUpdateQueue

+ (EMiniUpdateQueue *)defaultQueue {
    static EMiniUpdateManager * _share;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _share = [[EMiniUpdateQueue alloc] init];
    });
    return _share;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.managers = [NSMutableArray array];
    }
    return self;
}

- (void)startQueue {
    if (_isOn) { return; }
    _isOn = true;
    [self beginCheckUpdateAll];
    if (!_hasObserver) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didBecomeActive) name:UIApplicationDidBecomeActiveNotification object:nil];
        _hasObserver = true;
    }
}

- (void)didBecomeActive {
    [self beginCheckUpdateAll];
}

- (void)stopQueue {
    _hasObserver = false;
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIApplicationDidBecomeActiveNotification object:nil];
    _isOn = false;
}

- (EMiniUpdateManager *)addMiniId: (NSString *)miniId {
    EMiniUpdateManager * exist = [self managerById:miniId];
    if (exist) {
        return exist;
    }
    EMiniUpdateManager * newManager = [[EMiniUpdateManager alloc] init:miniId];
    [self.managers addObject: newManager];
    return newManager;
}

- (void)beginCheckUpdateAll {
    if (!_isOn) {return;}
    for (EMiniUpdateManager * manager in self.managers) {
        [self beginCheckUpdateManager:manager];
    }
}

- (void)beginCheckUpdate: (NSString *)miniId {
    if (!_isOn) {return;}
    EMiniUpdateManager * manager = [self managerById:miniId];
    [self beginCheckUpdateManager:manager];
}

- (void)beginCheckUpdateManager: (EMiniUpdateManager *)manager {
    if (!_isOn) {return;}
    if (!manager) { return; }
    [self isManagerUpdating:manager check:^(BOOL updating, EMiniUpdateManager *manager) {
        if (!updating) {
            [manager checkUpdate];
        }
    }];
}

- (void)isUpdating: (NSString *)miniId check: (void(^)(BOOL updating, EMiniUpdateManager * manager)) check {
    EMiniUpdateManager * manager = [self managerById:miniId];
    if (manager) {
        [self isManagerUpdating:manager check:check];
    } else {
        EMiniUpdateManager * new = [self addMiniId:miniId];
        check(false, new);
    }
}

- (void)isManagerUpdating: (EMiniUpdateManager *)manager check: (void(^)(BOOL updating, EMiniUpdateManager * manager)) check {
    [manager syncCheckUpdating:check];
}

- (EMiniUpdateManager *) managerById: (NSString *)miniId {
    for (EMiniUpdateManager * manager in self.managers) {
        if ([manager.miniId isEqualToString:miniId]) {
            return manager;
        }
    }
    return nil;
}

- (NSArray *)managerMiniIds {
    return [self.managers mutableArrayValueForKeyPath:@"miniId"];
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIApplicationDidBecomeActiveNotification object:nil];
}
@end
