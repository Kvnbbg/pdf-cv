//
//  EMiniBaseViewController.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/11.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniBaseViewController.h"

#import "EMiniUpdateManager.h"

#import <React/RCTBundleURLProvider.h>

#import <React/RCTDevSettings.h>

#import <React/RCTDevMenu.h>

#import <React/RCTDevMenu.h>

#import <React/RCTAssert.h>

#import "EMiniApi.h"

#import "EMiniViewManager.h"

#import "EMiniInfoModel.h"

#import "EMiniBaseViewController+Tool.h"

#import "EMiniTool.h"

#import "EMiniBaseViewController+push.h"

#import "EMiniBaseViewController+gesture.h"

#import "EMiniEventEmitter.h"

#import "EMiniUpdateQueue.h"

@interface EMiniBaseViewController()<EMiniUpdateManagerDelegate, EMiniFuncViewDelegate>
{
    EMiniLoadingView * _loadingView;
}

/**
 更新器
 */
@property(nonatomic, strong) EMiniUpdateManager * updateManager;

/**
 当前界面的唯一编号 view manager 控制
 */
@property(nonatomic, copy) NSString * uuid;

/**
 发送给 js 事件的发送者
 */
@property(nonatomic, strong) EMiniEventEmitter * eventEmitter;

/**
 js 事件存储
 */
@property(nonatomic, strong) NSMutableDictionary * eventManager;

/**
 存放 loadingView 和 rootView
 */
@property(nonatomic, strong) UIView * contentView;

@end

@implementation EMiniBaseViewController

- (instancetype)init:(NSString *)miniId
{
    self = [super init];
    if (self) {
        _miniBarStyle = UIStatusBarStyleDefault;
#if RCT_DEBUG
        _showFuncView = true;
#endif
        self.transitionStyle = EMiniTransitionStylePush;
        self.placeHolderTitle = @"加载中...";
        self.miniId = miniId;
        self.updateManager = [[EMiniUpdateManager alloc] init:miniId];
        self.uuid = [EMiniViewManager getUUID:miniId];
        /// 如果该小程序已经打开了调试模式，则按照调试模式的参数配置
        if ([EMiniViewManager hasOpenDebug:miniId]) {
            _debug = true;
            NSDictionary * params = [EMiniViewManager debugParams:miniId];
            self.debugPort = params[@"debugPort"];
            self.debugIp = params[@"debugIp"];
            self.page = params[@"page"];
        } else {
            _debug = false;
            self.debugPort = @"8081";
            self.debugIp = @"localhost";
        }
    }
    return self;
}

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    return [super initWithNibName:nil bundle:nil];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.edgesForExtendedLayout = UIRectEdgeNone;
    
    self.automaticallyAdjustsScrollViewInsets = false;
    
    self.title = self.placeHolderTitle;
    
    [self commitInitView];
    
    [[EMiniViewManager share] appendNewView:self];
    
    if (self.isDebug) {
        [self developTest];
        return;
    }
    
    [self commitInitLoadingView];
    
    [self setErrorDeal];
    
    [self checkUpdate];
}

- (void)commitInitView {
    
    self.view.backgroundColor = [UIColor clearColor];
    
    self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"" style:UIBarButtonItemStylePlain target:nil action:nil];
    
    self.contentView = [[UIView alloc] initWithFrame:self.view.frame];
    self.contentView.layer.shadowOffset = CGSizeMake(0, -3);
    self.contentView.layer.shadowColor = [UIColor blackColor].CGColor;
    self.contentView.layer.shadowRadius = 3;
    self.contentView.layer.shadowOpacity = 0.13;
    self.contentView.backgroundColor = [UIColor whiteColor];
    
    [self.view addSubview:self.contentView];
}

- (void)checkUpdate {
    
    __weak typeof (EMiniBaseViewController *) wSelf = self;
    
    if (![EMiniViewManager hasCheckUpdate:self.miniId] || ![self.updateManager.miniApi bundleExist: [self.updateManager.miniApi version]]) {
        
        EMiniUpdateQueue * queue = [EMiniUpdateQueue defaultQueue];
        
        [queue isUpdating:self.miniId check:^(BOOL updating, EMiniUpdateManager *manager) {
            wSelf.updateManager = manager;
            manager.delegate = wSelf;
            // 本地也没有，没有在更新，则再次更新
            if (!updating) {
                [queue beginCheckUpdateManager:manager];
            }
            // 本地没有，但是正在更新。
        }];
    } else {
        [self loadLocalVersion:[self.updateManager.miniApi bundlePath:[self.updateManager.miniApi version]]];
    }
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    // tell rn viewWillAppear event
    [self callEvent:@"viewWillAppear" body:@{@"animated": animated ? @(1) : @(0)}];
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    [self setErrorDeal];
    // tell rn viewDidAppear event
    [self callEvent:@"viewDidAppear" body:@{@"animated": animated ? @(1) : @(0)}];
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    // tell rn viewWillAppear event
    [self callEvent:@"viewWillDisappear" body:@{@"animated": animated ? @(1) : @(0)}];
}

- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    // tell rn viewDidDisappear event
    [self callEvent:@"viewDidDisappear" body:@{@"animated": animated ? @(1) : @(0)}];
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    self.contentView.frame = self.view.bounds;
    _rootView.frame = self.contentView.bounds;
}

/**
 deal error
 */
- (void)setErrorDeal {
    NSString * miniId = self.miniId ?: @"unknown";
    __weak typeof (EMiniBaseViewController *) wSelf = self;
    RCTSetFatalHandler(^(NSError *error) {
#if RCT_DEV
#else
        /* only release will deal error. */
        __strong typeof (EMiniBaseViewController *) sSelf = wSelf;
        [sSelf showErrorView];
#endif
        /* 发送mini运行崩溃的通知和崩溃信息 */
        EMiniApi * api = [[EMiniApi alloc] init: miniId];
        int version =  [api version];
        NSNotification * nf = [[NSNotification alloc] initWithName:EMiniRunErrorNotificationName object:error userInfo:@{@"version": @(version), @"miniId": miniId}];
        [[NSNotificationCenter defaultCenter] postNotification:nf];
    });
    

}

#pragma mark - load

/**
 进入开发模式
 */
- (void)developTest {
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(javaScriptDidLoad) name:RCTJavaScriptDidLoadNotification object:nil];
    
    __weak typeof (EMiniBaseViewController *) wSelf = self;
    
    /// 默认禁用侧滑手势
    [self setEnableEdgDismiss:false];
    
    /// 一旦页面加载完毕。则无论是否存在新版本。都不再允许更新当前界面
    self.updateManager.delegate = nil;
    self.updateManager = nil;
    
    [_loadingView removeFromSuperview];
    _loadingView = nil;
    
    NSString * path = [NSString stringWithFormat:@"http://%@:%@/index.bundle?platform=ios&dev=%@&minify=%@",
                       self.debugIp,
                       self.debugPort,
                       @"true",
                       @"false"
                       ];
    
    NSURL * url = [NSURL URLWithString: path];
    
    NSDictionary * params = [self getParams];
    
    _rootView = [[RCTRootView alloc] initWithBundleURL:url moduleName:self.miniId initialProperties:params launchOptions:nil];
    
    _rootView.backgroundColor = [UIColor clearColor];
    
    _rootView.frame = self.view.bounds;
    
    [self.contentView addSubview:_rootView];
    
    _rootView.frame = self.view.bounds;
    
    [self commitInitDebugFuncView];
    
    _rootView.bridge.devSettings.isShakeToShowDevMenuEnabled = true;
}

- (void)javaScriptDidLoad {
    
}

/**
 加载本地版本
 
 @param path 本地路径
 */
-(void) loadLocalVersion:(NSString *)path {
    
    EMiniMainAsync(^{

        /// 默认禁用侧滑手势
        [self setEnableEdgDismiss:false];
        
        /// 一旦页面加载完毕。则无论是否存在新版本。都不再允许更新当前界面
        self.updateManager.delegate = nil;
        self.updateManager = nil;
        
        [_loadingView removeFromSuperview];
        _loadingView = nil;
        
        NSURL * url = [NSURL fileURLWithPath: path];
        
        NSDictionary * params = [self getParams];
        
        _rootView = [[RCTRootView alloc] initWithBundleURL:url
                                                moduleName:self.miniId
                                         initialProperties:params
                                             launchOptions:nil];
        
        _rootView.backgroundColor = [UIColor clearColor];
        
        _rootView.frame = self.view.bounds;
        
        _rootView.alpha = 0;
        
        [self.contentView addSubview:_rootView];
        
        [UIView animateWithDuration:0.25 animations:^{
            _rootView.alpha = 1;
        }];
        
        _rootView.frame = self.contentView.bounds;
        
        _rootView.bridge.devSettings.isShakeToShowDevMenuEnabled = false;
#if RCT_DEBUG
        [self commitInitDebugFuncView];
#endif
        
    });
}

#pragma mark - event

- (void) registEvent: (NSString *)eventName eventWithCallBack: (void (^)(id data, RCTResponseSenderBlock callBack)) eventAction {
    
    NSMutableDictionary * em = self.eventManager;
    
    if (em[eventName]) { [em removeObjectForKey:eventName]; }
    
    void (^action)(id data, RCTResponseSenderBlock callBack) = ^(id data, RCTResponseSenderBlock jsCallBack) {
        if (eventAction) {
            eventAction(data, jsCallBack);
        }
    };
    
    em[eventName] = action;
}

- (void) registEvent: (NSString *)eventName event: (void(^)(id data)) eventAction {
    
    NSMutableDictionary * em = self.eventManager;
    
    if (em[eventName]) { [em removeObjectForKey:eventName]; }
    
    void (^action)(id data, RCTResponseSenderBlock callBack)  = ^(id data, RCTResponseSenderBlock jsCallBack) {
        if (eventAction) {
            eventAction(data);
        }
    };
    
    em[eventName] = action;
    
}

- (void) apiCallEvent: (NSString *)eventName body: (NSDictionary *)body callBack: (RCTResponseSenderBlock) callBack {
    
    NSMutableDictionary * em = self.eventManager;
    
    if (em[eventName]) {
        ((void (^)(id data, RCTResponseSenderBlock callBack))(em[eventName]))(body, callBack);
    }
}

- (void) callEvent: (NSString *)eventName body: (NSDictionary *)body {
    if (!eventName) {return;}
    EMiniEventEmitter * sender = self.eventEmitter;
    if (sender) {
        [self.eventEmitter sendEvent:eventName body:body];
    }
}

- (NSMutableDictionary *)eventManager {
    if (!_eventManager) {
        _eventManager = [NSMutableDictionary dictionary];
    }
    return _eventManager;
}

- (EMiniEventEmitter *)eventEmitter {
    return [_rootView.bridge moduleForClass:[EMiniEventEmitter class]];;
}

#pragma mark - dismiss

- (void)didMoveToParentViewController:(UIViewController *)parent {
    [super didMoveToParentViewController:parent];
    if (!parent && self.transitionStyle == EMiniTransitionStylePush) {
        [[EMiniViewManager share] dismissMiniId:self.miniId uuid:self.uuid];
    }
}

- (void)invalidAndDismiss: (BOOL)animated {
    [[EMiniViewManager share] dismissMiniId:self.miniId uuid:self.uuid animated:animated];
}

- (void)invalidOnlyUI: (NSNumber *)value {
    BOOL animated = [value boolValue];
    if (self.transitionStyle == EMiniTransitionStylePush) {
        if (self.navigationController) {
            [self.navigationController popViewControllerAnimated:animated];
        } else {
            [self dismissViewControllerAnimated:animated completion:nil];
        }
    } else {
        [self dismissViewControllerAnimated:animated completion:nil];
    }
}

#pragma mark - func view

- (void)clickDismissWithMiniFuncView:(EMiniFuncView *)funcView {
    [self invalidAndDismiss:true];
}

- (void)clickFuncWithMiniFuncView:(EMiniFuncView *)funcView {
    [self showFunc];
}

#pragma mark - loading

- (void)showErrorView {
    
    EMiniMainSafe(^{
        [_rootView removeFromSuperview];
        _rootView = nil;
        
        _loadingView = [[EMiniLoadingView alloc] initWithFrame:self.view.bounds];
        _loadingView.backgroundColor = [UIColor whiteColor];
        [self.contentView addSubview:_loadingView];
        
        _funcView = [[EMiniFuncView alloc] initWithFrame:CGRectMake(_loadingView.frame.size.width - 90, 25, 30, 30)];
        _funcView.delegate = self;
        [_loadingView addSubview:_funcView];
        [_funcView setOnlyCycleView:true];
        [self setEnableEdgDismiss:true];
    
        _loadingView.progressLabel.text = @"运行出错";
        _loadingView.title = @"运行出错";
    });
}

- (void)commitInitLoadingView {
    
    [_loadingView removeFromSuperview];
    
    _loadingView = nil;
    
    _loadingView = [[EMiniLoadingView alloc] initWithFrame:self.view.bounds];
    _loadingView.backgroundColor = [UIColor whiteColor];
    [self.contentView addSubview:_loadingView];
    _loadingView.title = self.placeHolderTitle;
    
    CGFloat width = _debug ? 80 : 30;
    
#if RCT_DEBUG
    width = 80;
#endif
    
    _funcView = [[EMiniFuncView alloc] initWithFrame:CGRectMake(_loadingView.frame.size.width - 90, 25, width, 30)];
    _funcView.delegate = self;
    [_loadingView addSubview:_funcView];
#if RCT_DEBUG
    [_funcView setOnlyCycleView:false];
#else
    [_funcView setOnlyCycleView:true];
#endif
    [self setEnableEdgDismiss:true];
}

- (void)commitInitDebugFuncView {
    
    _funcView = [[EMiniFuncView alloc] initWithFrame:CGRectMake(self.view.frame.size.width - 90, 25, 80, 30)];
    
    _funcView.delegate = self;

    [self.contentView addSubview:_funcView];
    
    [self.contentView bringSubviewToFront:_funcView];
    
    [_funcView setStyleWhite];
    
}

- (void)setShowFuncView:(BOOL)showFuncView {
    _showFuncView = showFuncView;
    if (_showFuncView) {
        if (!_funcView) {
            [self commitInitDebugFuncView];
        }
    } else {
        self.funcView.hidden = true;
    }
}

#pragma mark - update manager delegate

/// 展示未查询到小程序的提示
-(void) showNotFindMini {
    EMiniMainSafe(^{
        _loadingView.title = @"未发现此小程序";
        _loadingView.progressLabel.text = @"未发现此小程序";
    });
}

/// 展示数据异常
-(void) showDataError:(NSString *)code {
    EMiniMainSafe(^{
        NSString * show = [@"数据异常" stringByAppendingString:code ? [NSString stringWithFormat:@"(%@)", code] : @"" ];
        _loadingView.progressLabel.text = show;
        _loadingView.title = show;
    });
}

/// 展示网络错误
-(void) showNetError {
    EMiniMainSafe(^{
        _loadingView.title = @"网络异常";
        _loadingView.progressLabel.text = @"网络异常";
    });
        
}

/// 开始下载更新
-(void) beginDownLoad:(int)version {
    EMiniMainSafe(^{
        _loadingView.progress = 0;
    });
}

/// 更新下载进度
-(void) updatePrgress:(double)progress {
    EMiniMainSafe(^{
        _loadingView.progress = progress;
    });
}

-(void)loadMiniInfo:(EMiniInfoModel *)model {
    EMiniMainSafe(^{
        self.infoModel = model;
        if (_loadingView) {
            _loadingView.title = model.name;
        }
    });
}

-(void)loadMiniIcon:(UIImage *)image {
    EMiniMainSafe(^{
        if (_loadingView) {
            _loadingView.icon = image;
        }
    });
}

#pragma mark - get and set

- (NSDictionary *)miniInfoParams {
    
    NSString * nativeStatus = @"release";
    
#ifdef DEBUG
    nativeStatus = @"debug";
#endif
    
    NSMutableDictionary * result = [NSMutableDictionary dictionary];
    
    [result setObject:self.miniId forKey:@"miniId"];
    
    [result setObject:self.uuid forKey:@"miniUUID"];
    
    if (self.page) {
        [result setObject:self.page forKey:@"page"];
    }
    
    return result;
}

- (NSDictionary *)getParams {
    NSMutableDictionary * result = [NSMutableDictionary dictionary];
    [result addEntriesFromDictionary:@{
                                       @"miniInfo": [self miniInfoParams]}];
    if (self.params && [self.params isKindOfClass:[NSDictionary class]]) {
        [result addEntriesFromDictionary:@{@"params": self.params}];
    } else {
        [result addEntriesFromDictionary:@{@"params": @{}}];
    }
    return result;
}

- (void)setMiniBarStyle:(UIStatusBarStyle)miniBarStyle {
    _miniBarStyle = miniBarStyle;
    [self setNeedsStatusBarAppearanceUpdate];
}

- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    
    return UIInterfaceOrientationMaskPortrait;
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    return self.miniBarStyle;
}

- (BOOL)modalPresentationCapturesStatusBarAppearance {
    return true;
}

#pragma mark - modal style

- (void)setTransitionStyle:(EMiniTransitionStyle)transitionStyle {
    _transitionStyle = transitionStyle;
    if (_transitionStyle == EMiniTransitionStylePresentLikePush) {
        self.modalPresentationStyle = UIModalPresentationCustom;
    } else {
        self.modalPresentationStyle = UIModalPresentationFullScreen;
    }
}

- (id<UIViewControllerTransitioningDelegate>)transitioningDelegate {
    return self.transitionStyle == EMiniTransitionStylePresentLikePush ? [self miniTransitionDelegate] : nil;
}

- (void)dealloc
{
    [_eventManager removeAllObjects];
    [_rootView removeFromSuperview];
    _rootView = nil;
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[EMiniViewManager share] dismissMiniId:self.miniId uuid:self.uuid];
    EMiniLog([NSString stringWithFormat:@"dealloc: %@", self.miniId]);
}
@end
