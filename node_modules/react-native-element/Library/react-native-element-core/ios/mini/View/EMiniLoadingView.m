//
//  EMiniLoadingView.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/14.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniLoadingView.h"

@interface EMiniLoadingView()

@property(nonatomic, strong) UILabel * nameLabel;

@property(nonatomic, strong) UILabel * progressLabel;

@property(nonatomic, strong) UIImageView * iconImageView;

@property(nonatomic, strong) EMiniLoadingPointsView * loadingView;

@end

@implementation EMiniLoadingView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self commitInitView];
    }
    return self;
}

- (void)commitInitView {
    
    self.nameLabel = [[UILabel alloc] init];
    self.nameLabel.textAlignment = NSTextAlignmentCenter;
    self.nameLabel.font = [UIFont boldSystemFontOfSize:17];
    self.nameLabel.textColor = [UIColor blackColor];
    
    self.progressLabel = [[UILabel alloc] init];
    
    self.iconImageView = [[UIImageView alloc] init];
    self.iconImageView.bounds = CGRectMake(0, 0, 60, 60);
    self.iconImageView.layer.masksToBounds = true;
    self.iconImageView.layer.cornerRadius = 6;
    self.iconImageView.backgroundColor = [UIColor colorWithRed:257.0 / 255.0 green:217.0 / 255.0 blue:97.0 / 255.0 alpha:1];
    self.iconImageView.image = [UIImage imageNamed:@"AppIcon60x60"];
    
    self.loadingView = [[EMiniLoadingPointsView alloc] initWithFrame:CGRectMake(0, 0, 0, 0)];
    
    [self addSubview:self.nameLabel];
    
    [self addSubview:self.iconImageView];
    
    [self addSubview:self.loadingView];
    
    [self addSubview:self.progressLabel];
    self.progressLabel.textAlignment = NSTextAlignmentCenter;
    self.progressLabel.font = [UIFont systemFontOfSize:14];
    self.progressLabel.textColor = [UIColor lightGrayColor];
    
}

- (void)setTitle:(NSString *)title {
    _title = title;
    self.nameLabel.text = title ?: @"加载中...";
}

- (void)setIcon:(UIImage *)icon {
    _icon = icon;
    self.iconImageView.image = icon;
}

- (void)setProgress:(double)progress {
    _progress = progress;
    self.progressLabel.text = [NSString stringWithFormat:@"%.2f%%", progress * 100];
}

- (void)layoutSubviews {
    [super layoutSubviews];
    self.iconImageView.center = CGPointMake(self.frame.size.width / 2.0, 90);
    self.nameLabel.frame = CGRectMake(0,
                                      CGRectGetMaxY(self.iconImageView.frame) + 10,
                                      self.frame.size.width,
                                      25);
    self.loadingView.center = CGPointMake(self.frame.size.width / 2.0, CGRectGetMaxY(self.nameLabel.frame) + 10 + 4);
    
    self.progressLabel.bounds = CGRectMake(0, 0, self.frame.size.width, 20);
    self.progressLabel.center = CGPointMake(self.frame.size.width / 2.0, self.frame.size.height / 2.0);
}

@end

@interface EMiniLoadingPointsView()<CAAnimationDelegate>
{
    CALayer * _maskLayer;
    BOOL needStop;
    BOOL animating;
}

@end

@implementation EMiniLoadingPointsView

- (instancetype)initWithFrame:(CGRect)frame
{
    CGRect new = CGRectMake(frame.origin.x, frame.origin.y, 8 * 3 + 2 * 6, 8);
    self = [super initWithFrame:new];
    if (self) {
        [self commitInitView];
    }
    return self;
}

- (void)commitInitView {
    
    for (int i = 0; i < 3; i++) {
        CALayer * layer = [[CALayer alloc] init];
        layer.frame = CGRectMake(i * (8 + 6), 0, 8, 8);
        layer.backgroundColor = [[UIColor grayColor] CGColor];
        layer.cornerRadius = 4;
        [self.layer addSublayer:layer];
    }
    
    CGFloat width = self.bounds.size.width;
    
    CGFloat height = self.bounds.size.height;
    
    CALayer * mask = [CALayer layer];
    
    mask.frame = CGRectMake(0, 0, width * 3, height);
    
    CALayer * left = [CALayer layer];
    left.frame = CGRectMake(0, 0, width, height);
    left.backgroundColor = [[UIColor brownColor] CGColor];
    [mask addSublayer:left];
    
    CAGradientLayer * center = [CAGradientLayer layer];
    center.frame = CGRectMake(width, 0, width, height);
    center.locations = @[@(0), @(0.3333), @(0.666), @(1)];
    center.colors = @[(id)[UIColor colorWithWhite:1 alpha:1].CGColor,
                      (id)[UIColor colorWithWhite:1 alpha:0.5].CGColor,
                    (id)[UIColor colorWithWhite:1 alpha:0.5].CGColor,
                    (id)[UIColor colorWithWhite:1 alpha:1].CGColor];
    center.startPoint = CGPointMake(0, 0.5);
    center.endPoint = CGPointMake(1, 0.5);
    [mask addSublayer:center];

    CALayer * right = [CALayer layer];
    right.frame = CGRectMake(width * 2, 0, width, height);
    right.backgroundColor = [[UIColor blueColor] CGColor];
    [mask addSublayer:right];
    
    self.layer.mask = mask;
    
    _maskLayer = mask;
    
}

- (void)didMoveToWindow {
    [super didMoveToWindow];
    [self start];
}

- (void)willMoveToWindow:(UIWindow *)newWindow {
    if (!newWindow) {
        [self stop];
    } else {
        [self start];
    }
}

- (void)start {
    if (!self.window) {
        return;
    }
    if (animating) {
        return;
    }
    needStop = false;
    animating = true;
    [self addAnimation];
}

- (void)addAnimation {
    if (!self.window) {
        [self stop];
        return;
    }
    CABasicAnimation * animation = [CABasicAnimation animationWithKeyPath:@"position.x"];
    animation.delegate = self;
    animation.duration = 2;
    animation.fromValue = @(-self.bounds.size.width / 2.0);
    animation.toValue = @(self.bounds.size.width * 1.5);
    animation.removedOnCompletion = true;
    [_maskLayer addAnimation:animation forKey:@"animation"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag {
    
    if (flag) {
        [_maskLayer removeAnimationForKey:@"animation"];
        if (needStop) {
            animating = false;
            return;
        }
        [self addAnimation];
    } else {
        [self addAnimation];
    }
}

- (void)stop {
    needStop = true;
}

- (void)dealloc
{
    [self stop];
    [_maskLayer removeAnimationForKey:@"animation"];
}

@end
