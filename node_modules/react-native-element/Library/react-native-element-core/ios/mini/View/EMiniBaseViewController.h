//
//  EMiniBaseViewController.h
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/11.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import <Foundation/Foundation.h>

#import <UIKit/UIKit.h>

#import <React/RCTBridgeModule.h>

#import <React/RCTRootView.h>

#import "EMiniFuncView.h"

#import "EMiniLoadingView.h"

typedef NS_ENUM(NSInteger, EMiniTransitionStyle) {
    EMiniTransitionStylePresent, // 正常的模态出来
    EMiniTransitionStylePush, // 导航控制器 push 出来
    EMiniTransitionStylePresentLikePush // 从右侧模态出来
};

@class EMiniInfoModel, EMiniEventEmitter;

@interface EMiniBaseViewController : UIViewController
{
    id <UIViewControllerTransitioningDelegate> _miniTransitionDelegate;
}

#pragma mark - mini info

/**
 小程序ID
 */
@property(nonatomic, copy) NSString * miniId;

/**
 当前界面的唯一编号 view manager 控制
 */
@property(nonatomic, copy, readonly) NSString * uuid;

/**
 小程序详细信息，只有当前小程序信息请求成功才存在，否则 nil
 */
@property(nonatomic, strong) EMiniInfoModel * infoModel;

/**
 入口界面
 */
@property(nonatomic, copy) NSString * page;

/**
 传递的参数
 */
@property(nonatomic, strong) NSDictionary * params;


#pragma mark - debug

/**
 是否是 debug 模式
 */
@property(nonatomic, assign, getter=isDebug) BOOL debug;

/**
 debug ip default is localhost
 */
@property(nonatomic, copy) NSString * debugIp;

/**
 debug port default is 8081
 */
@property(nonatomic, copy) NSString * debugPort;

/**
 获取小程序信息之前时的标题占位标题
 */
@property(nonatomic, copy) NSString * placeHolderTitle;

#pragma mark - views

/**
 rct view
 */
@property(nonatomic, strong, readonly) RCTRootView * rootView;

/**
 loading view
 */
@property(nonatomic, strong, readonly) EMiniLoadingView * loadingView;

/**
 存放 loadingView 和 rootView funcView 所有视图的父视图
 */
@property(nonatomic, strong, readonly) UIView * contentView;

/**
 is show func view default is false
 */
@property(nonatomic, assign) BOOL showFuncView;

/**
 func view
 */
@property(nonatomic, strong, readonly) EMiniFuncView * funcView;

#pragma mark - ui style

/**
 status bar style 
 */
@property(nonatomic, assign) UIStatusBarStyle miniBarStyle;

/**
 转场风格，默认是 EMiniTransitionStylePresent，如果代码中 push 此控制器，更改为 EMiniTransitionStylePush
 */
@property(nonatomic, assign)EMiniTransitionStyle transitionStyle;


#pragma mark - js bridge

/**
 发送给 js 事件的发送者
 */
@property(nonatomic, strong, readonly) EMiniEventEmitter * eventEmitter;

/// 注册事件，含有回调 js
- (void) registEvent: (NSString *)eventName eventWithCallBack: (void(^)(id data, RCTResponseSenderBlock callBack)) eventAction;

/// 注册事件
- (void) registEvent: (NSString *)eventName event: (void(^)(id data)) eventAction;

/// 发送事件和数据到 js
- (void) callEvent: (NSString *)eventName body: (NSDictionary *)body;

/// 【【【【【此方法专为 EMiniApi 使用，请勿使用】】】】】】
- (void) apiCallEvent: (NSString *)eventName body: (NSDictionary *)body callBack: (RCTResponseSenderBlock) callBack;

/**
 构造方法

 @param miniId 小程序ID
 @return 实例对象
 */
- (instancetype)init:(NSString *)miniId;

/**
 销毁当前界面
 */
- (void)invalidAndDismiss: (BOOL)animated;
@end
