//
//  EMiniViewManager.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/13.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniViewManager.h"

#import "EMiniTool.h"

@interface EMiniViewManager ()

@property(nonatomic, strong) NSMutableDictionary * views;

@end

@implementation EMiniViewManager

+ (instancetype)share {
    static EMiniViewManager * manager;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [[EMiniViewManager alloc] init];
    });
    return manager;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.views = [NSMutableDictionary dictionary];
    }
    return self;
}

- (void)appendNewView: (EMiniBaseViewController *)vc {
    EMiniWeakObject * obj = [[EMiniWeakObject alloc] init:vc];
    if (self.views[vc.miniId]) {
        [self.views[vc.miniId] addObject:obj];
    } else {
        [self.views setObject:[NSMutableArray arrayWithObject:obj] forKey:vc.miniId];
    }
}

- (NSArray *)viewsByMiniId: (NSString *)miniId {
    NSMutableArray * views = [NSMutableArray array];
    for (EMiniWeakObject * obj in [self existWeakObjects:miniId]) {
        if (obj.obj) {
            [views addObject:obj.obj];
        }
    }
    return views;
}

- (NSArray *)existWeakObjects: (NSString *)miniId {
    NSArray * objs = (self.views[miniId] ?: @[]);
    NSMutableArray * exist = [NSMutableArray array];
    for (EMiniWeakObject * obj in objs) {
        if (obj.obj) {
            [exist addObject:obj];
        }
    }
    // 说明部分控制器已经不可用了，被回收，可以移除出去
    if (exist.count != objs.count) {
        self.views[miniId] = exist;
    }
    return exist;
}

- (void)dismissMiniId:(NSString *)miniId uuid: (NSString *)uuid {
    [self dismissMiniId:miniId uuid:uuid animated:true];
}

- (void)dismissMiniId:(NSString *)miniId uuid: (NSString *)uuid animated: (BOOL)animated {
    @synchronized (self) {
        EMiniWeakObject * target = [self weakObjectByMiniId:miniId uuid:uuid];
        EMiniBaseViewController * miniVC = target.obj;
        if (target && miniVC) {
            if ([self.views[miniId] containsObject:target]) {
                [self.views[miniId] removeObject:target];
            }
            SEL a = NSSelectorFromString(@"invalidOnlyUI:");
            [miniVC performSelectorOnMainThread:a withObject:@(animated ? 1 : 0) waitUntilDone:true];
        }
    }
}

- (EMiniWeakObject *)weakObjectByMiniId: (NSString *)miniId uuid: (NSString *)uuid {
    if (!miniId || !uuid) return nil;
    if (self.views[miniId]) {
        NSMutableArray * all = [self existWeakObjects:miniId];
        for (EMiniWeakObject * weakObject in all) {
            if (weakObject.obj && [((EMiniBaseViewController *) weakObject.obj).uuid isEqualToString:uuid]) {
                return weakObject;
            }
        }
    }
    return nil;
}

- (EMiniBaseViewController *)viewByMiniId: (NSString *)miniId uui: (NSString *)uuid {
    EMiniWeakObject * obj = [self weakObjectByMiniId:miniId uuid:uuid];
    if (obj && obj.obj) {
        return obj.obj;
    }
    return nil;
}

@end

static NSMutableDictionary * _miniSerialNoInfo;

static NSMutableDictionary * _miniDebugInfo;

static NSMutableDictionary * _miniUpdateInfo;

@implementation EMiniViewManager (info)

+ (void)initMiniUpdateInfo {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _miniUpdateInfo = [NSMutableDictionary dictionary];
    });
}

/**
 设置该小程序已经检查更新过
 
 @param miniId 小程序ID
 */
+ (void)setHasCheckUpdate: (NSString *)miniId {
    [self initMiniUpdateInfo];
    _miniUpdateInfo[miniId] = @(1);
}

/**
 是否该小程序已经更新过
 
 @param miniId 小程序ID
 @return 是否已经更新
 */
+ (BOOL)hasCheckUpdate: (NSString *)miniId {
    if (!_miniUpdateInfo) { return false; }
    if (_miniUpdateInfo[miniId]) {
        return [_miniUpdateInfo[miniId] boolValue];
    }
    return false;
}

+ (void)initMiniSerialNo {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _miniSerialNoInfo = [NSMutableDictionary dictionary];
    });
}

/**
 随机获取小程序页面编号
 
 @param miniId 小程序ID
 @return 编号
 */
+ (NSString *)getUUID: (NSString *)miniId {
    [self initMiniSerialNo];
    NSString * uuid = [[NSUUID UUID] UUIDString];
    if (!_miniSerialNoInfo[miniId]) {
        _miniSerialNoInfo[miniId] = [NSMutableArray array];
    }
    if ([_miniSerialNoInfo[miniId] containsObject:uuid]) {
        return [self getUUID:miniId];
    } else {
        [_miniSerialNoInfo[miniId] addObject:uuid];
        return uuid;
    }
}

+ (void)initMiniDebugInfo {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _miniDebugInfo = [NSMutableDictionary dictionary];
    });
}

/**
 是否指定小程序已经开启了 debug 模式
 
 @param miniId 小程序ID
 @return 是否已经开启小程序 debug
 */
+ (BOOL) hasOpenDebug: (NSString *)miniId {
    [self initMiniDebugInfo];
    if([self debugParams:miniId]) {
        return [[self debugParams:miniId][@"debug"] boolValue];
    }
    return false;
}

/**
 debug 下的参数

 @param miniId 小程序ID
 @return debug 参数
 */
+ (NSDictionary *)debugParams: (NSString *)miniId {
    return _miniDebugInfo[miniId];
}

/**
 打开指定小程序的 debug 模式
 
 @param miniId 小程序ID
 */
+ (void) openDebug: (NSString *)miniId options: (NSDictionary *)options {
    NSMutableDictionary * p = [NSMutableDictionary dictionaryWithDictionary:options];
    p[@"debug"] = @(1);
    _miniDebugInfo[miniId] = p.copy;
}

/**
 关闭指定小程序的 debug 模式
 
 @param miniId 小程序ID
 */
+ (void) closeDebug: (NSString *)miniId {
    _miniDebugInfo[miniId] = @{@"debug": @(0)};
}

/**
 记录最新的测试IP地址
 
 @param ip IP地址
 */
+ (void) recordLatestDebugIp: (NSString *)ip {
    [[NSUserDefaults standardUserDefaults] setValue:ip forKey:@"EMiniLatestDebugIp"];
}

/**
 获取最新的测试IP地址
 
 @return IP地址
 */
+ (NSString *)latestDebugIp {
    return [[NSUserDefaults standardUserDefaults] valueForKey:@"EMiniLatestDebugIp"];
}

@end
