//
//  EMiniFuncView.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/15.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniFuncView.h"

@interface EMiniFuncView()

@property(nonatomic, strong) UIView * lineView;

@end

@implementation EMiniFuncView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self commitInitView];
    }
    return self;
}

- (void)commitInitView {
    
    CGSize size = self.frame.size;
    self.cycleView = [[EMiniFuncCycleView alloc] initWithFrame:CGRectMake(size.width / 2.0, 0, size.width / 2.0, size.height)];
    self.cycleView.userInteractionEnabled = false;
    self.pointsView = [[EMiniFuncPointsView alloc] initWithFrame:CGRectMake(0, 0, size.width / 2.0, size.height)];
    self.pointsView.userInteractionEnabled = false;
    [self addSubview:self.cycleView];
    [self addSubview:self.pointsView];
    
    self.lineView = [[UIView alloc]init];
    self.lineView.backgroundColor = [UIColor lightGrayColor];
    [self addSubview:self.lineView];
    
    [self setStyleBlack];
}

- (void)setStyleBlack {
    self.layer.cornerRadius = self.frame.size.height / 2.0;
    self.layer.masksToBounds = true;
    self.layer.borderWidth = 0.5;
    self.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    
    self.backgroundColor = [UIColor clearColor];
    
    self.cycleView.tintColor = [UIColor blackColor];
    
    self.pointsView.tintColor = [UIColor blackColor];
}

- (void)setStyleWhite {
    self.layer.cornerRadius = self.frame.size.height / 2.0;
    self.layer.masksToBounds = true;
    self.layer.borderWidth = 0.5;
    self.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    
    self.backgroundColor = [UIColor colorWithWhite:0 alpha:0.2];
    
    self.cycleView.tintColor = [UIColor whiteColor];
    
    self.pointsView.tintColor = [UIColor whiteColor];
}

- (void)setOnlyCycleView:(BOOL)onlyCycleView
{
    _onlyCycleView = onlyCycleView;
    [self layoutSubviews];
}

- (void)layoutSubviews {
    [super layoutSubviews];
    if (self.onlyCycleView) {
        
        self.pointsView.hidden = true;
        CGSize size = self.frame.size;
        self.cycleView.bounds = CGRectMake(0, 0, size.width, size.height);
        self.cycleView.center = CGPointMake(self.frame.size.width / 2.0, self.frame.size.height / 2.0);
    } else {
        
        CGSize size = self.frame.size;
        self.cycleView.frame = CGRectMake(size.width / 2.0, 0, size.width / 2.0, size.height);
        self.pointsView.frame = CGRectMake(0, 0, size.width / 2.0, size.height);
        self.lineView.bounds = CGRectMake(0, 0, 0.8, self.frame.size.height * 0.6);
        self.lineView.center = CGPointMake(self.frame.size.width / 2.0, self.frame.size.height / 2.0);
    }
}

- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    UITouch * touch = touches.anyObject;
    if (CGRectContainsPoint(self.cycleView.bounds, [touch locationInView:self.cycleView])) {
        [self.delegate clickDismissWithMiniFuncView:self];
    } else if (CGRectContainsPoint(self.pointsView.bounds, [touch locationInView:self.pointsView])) {
        [self.delegate clickFuncWithMiniFuncView:self];
    }
}

@end



@interface EMiniFuncPointsView()
{
    CGFloat _centerRadius;
    CGFloat _sideRadius;
    CGFloat _padding;
}
@end

@implementation EMiniFuncPointsView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        _centerRadius = 3;
        _sideRadius = 1.8;
        _padding = 2.5;
        self.tintColor = [UIColor blackColor];
        self.opaque = false;
    }
    return self;
}

- (void)setTintColor:(UIColor *)tintColor {
    [super setTintColor:tintColor];
    [self setNeedsDisplay];
}

- (void)drawRect:(CGRect)rect {
    
    [super drawRect:rect];
    
    CGFloat width = rect.size.width;
    
    CGFloat height = rect.size.height;
    
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGContextSetFillColorWithColor(context, self.tintColor.CGColor);
    
    // center
    CGContextAddArc(context, width / 2.0, height / 2.0, _centerRadius, 0, M_PI * 2, true);
    
    CGContextFillPath(context);

    // left
    CGContextAddArc(context, width / 2.0 - _centerRadius - _padding - _sideRadius, height / 2.0, _sideRadius, 0, M_PI * 2, true);
    
    CGContextFillPath(context);
    
    // right
    CGContextAddArc(context, width / 2.0 + _centerRadius + _padding + _sideRadius, height / 2.0, _sideRadius, 0, M_PI * 2, true);

    CGContextFillPath(context);
}

@end


@interface EMiniFuncCycleView()
{
    CGFloat _bigRadius;
    CGFloat _sRadius;
}
@end

@implementation EMiniFuncCycleView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        _bigRadius = 7;
        _sRadius = 2.5;
        self.tintColor = [UIColor blackColor];
        self.opaque = false;
    }
    return self;
}

- (void)setTintColor:(UIColor *)tintColor {
    [super setTintColor:tintColor];
    [self setNeedsDisplay];
}

- (void)drawRect:(CGRect)rect {
    
    [super drawRect:rect];
    
    CGFloat width = rect.size.width;
    
    CGFloat height = rect.size.height;
    
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGContextSetStrokeColorWithColor(context, self.tintColor.CGColor);
    
    CGContextSetLineWidth(context, 2);
    
    CGContextAddArc(context, width / 2.0, height / 2.0, _bigRadius, 0, M_PI * 2, true);
    
    CGContextStrokePath(context);
    
    
    CGContextSetLineWidth(context, 0);
    
    CGContextSetFillColorWithColor(context, self.tintColor.CGColor);
    
    // center
    CGContextAddArc(context, width / 2.0, height / 2.0, _sRadius, 0, M_PI * 2, true);
    
    CGContextFillPath(context);
}

@end
