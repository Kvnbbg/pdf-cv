//
//  EMiniNativeSystemAPI.m
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/19.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import "EMiniNativeSystemAPI.h"

#import <Contacts/Contacts.h>
#import <ContactsUI/ContactsUI.h>
#import <Contacts/CNContactStore.h>

#import <AddressBookUI/ABPeoplePickerNavigationController.h>
#import <AddressBook/ABPerson.h>
#import <AddressBookUI/ABPersonViewController.h>

#import <CoreLocation/CoreLocation.h>

#import <AVFoundation/AVFoundation.h>

@interface EMiniNativeSystemAPI()<ABPeoplePickerNavigationControllerDelegate, CNContactPickerDelegate, CLLocationManagerDelegate>

@property(nonatomic, strong) CLLocationManager * locationManager;

@property(nonatomic, copy) EMiniNativeSystemAPIBlock locationBlock;

@property(nonatomic, copy)EMiniNativeSystemAPIBlock contactCallBack;

@property(nonatomic, copy) void(^saveToAlbumBlock)(BOOL success);

@end

@implementation EMiniNativeSystemAPI

- (NSString *)realSandBoxPath:(NSString * )path {
    return [NSHomeDirectory() stringByAppendingPathComponent:path];
}

- (void)savePicureToAlbum: (NSDictionary * )options result: (void(^)(BOOL success)) result {
    
    NSString * localPath = options[@"localPath"];
    
    NSString * localFullPath = options[@"localFullPath"];
    
    NSString * url = options[@"url"];
    
    if (localPath || localFullPath) {
        NSString * path;
        if (localPath) {
            path = [self realSandBoxPath:localPath];
        } else {
            path = localFullPath;
        }
        UIImage * image = [UIImage imageWithContentsOfFile:path];
        if (image) {
            self.saveToAlbumBlock = result;
            UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
        } else {
            result(NO);
        }
    } else if (url && [NSURL URLWithString:url]) {
        NSURLSessionDownloadTask * task = [[NSURLSession sharedSession] downloadTaskWithURL:[NSURL URLWithString:url] completionHandler:^(NSURL * _Nullable location, NSURLResponse * _Nullable response, NSError * _Nullable error) {
            if (error || location == nil || location.absoluteString == nil) {
                result(NO);
            } else {
                NSData *data = [NSData dataWithContentsOfURL:location];
                if (data) {
                    UIImage * image = [UIImage imageWithData:data];
                    if (image) {
                        self.saveToAlbumBlock = result;
                        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
                    } else {
                        result(NO);
                    }
                } else {
                    result(NO);
                }
            }
        }];
        [task resume];
    } else {
        result(NO);
    }
}

- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo; {
    if (self.saveToAlbumBlock) {
        self.saveToAlbumBlock(error == nil);
        self.saveToAlbumBlock = nil;
    }
}

-(void)vibrate: (NSString *)type
{
    if ([type isEqualToString:@"light"]) {
        [self _vibrate:UIImpactFeedbackStyleLight];
    } else if ([type isEqualToString:@"medium"]) {
        [self _vibrate:UIImpactFeedbackStyleMedium];
    } else if ([type isEqualToString:@"heavy"]) {
        [self _vibrate:UIImpactFeedbackStyleHeavy];
    } else if ([type isEqualToString:@"auto"]) {
        AudioServicesPlayAlertSound(kSystemSoundID_Vibrate);
    }
}

- (void)_vibrate: (UIImpactFeedbackStyle)type {
    if ([[[UIDevice currentDevice] systemVersion] doubleValue] >= 10.0) {
        dispatch_async(dispatch_get_main_queue(), ^{
            UIImpactFeedbackGenerator * vibrate = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleLight];
            [vibrate impactOccurred];
        });
    }
}
    
-(void)phoneCall: (NSString * )phoneNum {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        NSString * shell = [@"telprompt://" stringByAppendingString:phoneNum];
        NSURL * url = [NSURL URLWithString:shell];
        if (url && [[UIApplication sharedApplication] canOpenURL:url]) {
#ifdef __IPHONE_10_0
            [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
#else
            [[UIApplication sharedApplication] openURL:url];
#endif
        }
    });
}


-(void)getLocation: (EMiniNativeSystemAPIBlock)callback {
    dispatch_async(dispatch_get_main_queue(), ^{
        self.locationBlock = callback;
        self.locationManager.delegate = nil;
        [self.locationManager stopUpdatingLocation];
        self.locationManager = nil;
        if ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedWhenInUse || [CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedAlways){
            self.locationManager = [[CLLocationManager alloc] init];
            self.locationManager.delegate = self;
            [self.locationManager startUpdatingLocation];
        } else if ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusDenied || [CLLocationManager authorizationStatus] == kCLAuthorizationStatusRestricted) {
            NSString * appName = [[NSBundle mainBundle] infoDictionary][@"CFBundleDisplayName"];
            NSString * desc = [NSString stringWithFormat:@"请前往”设置“-”%@“-”位置”，允许访问位置信息", appName];
            UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"无定位权限" message: desc preferredStyle:UIAlertControllerStyleAlert];
            [alert addAction:[UIAlertAction actionWithTitle:@"知道了" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                
            }]];
            [[self topViewController] presentViewController:alert animated:true completion:nil];
            if (self.locationBlock) {
                self.locationBlock(nil, @"无定位权限");
                self.locationBlock = nil;
            }
        } else {
            self.locationManager = [[CLLocationManager alloc] init];
            self.locationManager.delegate = self;
            [self.locationManager requestWhenInUseAuthorization];
        }
    });
}

- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {
    if (status == kCLAuthorizationStatusAuthorizedWhenInUse || status == kCLAuthorizationStatusAuthorizedAlways){
        [manager startUpdatingLocation];
    } else {
        self.locationManager.delegate = nil;
        [self.locationManager stopUpdatingLocation];
        if (self.locationBlock) {
            self.locationBlock(nil, @"无定位权限");
            self.locationBlock = nil;
        }
    }
}

- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations {
    manager.delegate = nil;
    [manager stopUpdatingLocation];
    self.locationManager = nil;
    if (locations.count && self.locationBlock) {
        CLLocation * location = locations[0];
        if (self.locationBlock) {
            self.locationBlock(@{@"longitude": [NSString stringWithFormat:@"%f", location.coordinate.longitude] ,
                                 @"latitude": [NSString stringWithFormat:@"%f", location.coordinate.latitude]
                                 },
                               nil);
            self.locationBlock = nil;
        }
    }
}

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
    self.locationBlock = nil;
}

- (BOOL)isNine {
#ifndef __IPHONE_9_0
    return false;
#endif
    return true;
}

/**
 获取通讯录权限
 */
-(void)getContactAuthorization: (void(^)())success fail: (void(^)())fail {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        if ([self isNine]) {
            
            CNAuthorizationStatus status = [CNContactStore authorizationStatusForEntityType: CNEntityTypeContacts];
            
            if (status == CNAuthorizationStatusNotDetermined) {
                CNContactStore *store = [[CNContactStore alloc]init];
                [store requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError * _Nullable error) {
                    if (granted) {
                        success();
                    } else {
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [[[UIAlertView alloc] initWithTitle:[self contactNotAuthDesc] message:nil delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles:nil, nil] show];
                        });
                        fail();
                    }
                }];
                
                
            } else if (status == CNAuthorizationStatusAuthorized) {
                success();
            } else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [[[UIAlertView alloc] initWithTitle:[self contactNotAuthDesc] message:nil delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles:nil, nil] show];
                });
                fail();
            }
            
        }
        else  {
            
            ABAddressBookRef ref = ABAddressBookCreateWithOptions(nil, nil);
            
            ABAuthorizationStatus status = ABAddressBookGetAuthorizationStatus();
            
            // 未决定
            if (status == kABAuthorizationStatusNotDetermined) {
                
                ABAddressBookRequestAccessWithCompletion(ref, ^(bool granted, CFErrorRef error) {
                    
                    if (granted) {
                        success();
                    } else {
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [[[UIAlertView alloc] initWithTitle:[self contactNotAuthDesc] message:nil delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles:nil, nil] show];
                        });
                        fail();
                    }
                    
                });
            }
            
            // 同意
            else if (status == kABAuthorizationStatusAuthorized) {
                success();
            } else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [[[UIAlertView alloc] initWithTitle:[self contactNotAuthDesc] message:nil delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles:nil, nil] show];
                });
                fail();
            }
            
        }
        
    });
}

- (NSString *)contactNotAuthDesc {
    return @"请前往\"设置-什马出行-通讯录\"打开通讯录权限";
}

-(void)getAllContacts: (EMiniNativeSystemAPIBlock)callback {
    
    [self getContactAuthorization:^{
        
        NSMutableArray * contacts = [[NSMutableArray alloc]init];
        
        if ([self isNine]) {
            
            // 获取指定的字段,并不是要获取所有字段，需要指定具体的字段
            NSArray *keysToFetch = @[CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey];
            CNContactFetchRequest *fetchRequest = [[CNContactFetchRequest alloc] initWithKeysToFetch:keysToFetch];
            CNContactStore *contactStore = [[CNContactStore alloc] init];
            
            [contactStore enumerateContactsWithFetchRequest:fetchRequest error:nil usingBlock:^(CNContact * _Nonnull contact, BOOL * _Nonnull stop) {
                
                
                NSString *givenName = contact.givenName;
                NSString *familyName = contact.familyName;
                
                NSArray<CNLabeledValue<CNPhoneNumber*>*> * phoneNumbers = contact.phoneNumbers;
                
                if (givenName && familyName && phoneNumbers.count) {
                    
                    NSString *nameStr = [NSString stringWithFormat:@"%@%@",contact.familyName,contact.givenName];
                    
                    NSString * phoneNumber = phoneNumbers[0].value.stringValue;
                    
                    [contacts addObject: @{
                                           @"phoneNum": [self dealForPhoneNum: phoneNumber],
                                           @"name": nameStr
                                           }];
                }
                
            }];
        } else {
            
            ABAddressBookRef addressBook = ABAddressBookCreate();
            
            CFArrayRef results = ABAddressBookCopyArrayOfAllPeople(addressBook);
            
            for(int i = 0; i < CFArrayGetCount(results); i++)
            {
                ABRecordRef person = CFArrayGetValueAtIndex(results, i);
                //读取firstname
                NSString *personName = (__bridge NSString*)ABRecordCopyValue(person, kABPersonFirstNameProperty);
                
                //读取lastname
                NSString *lastname = (__bridge NSString*)ABRecordCopyValue(person, kABPersonLastNameProperty);
                
                //读取电话多值
                ABMultiValueRef phone = ABRecordCopyValue(person, kABPersonPhoneProperty);
                
                if (personName && lastname && ABMultiValueGetCount(phone) > 0) {
                    
                    NSString * personPhone = (__bridge NSString*)ABMultiValueCopyValueAtIndex(phone, 0);
                    
                    [contacts addObject: @{
                                           @"phoneNum":[self dealForPhoneNum: personPhone],
                                           @"name": [personName stringByAppendingString:lastname]
                                           }];
                    
                }
            }
            
            CFRelease(results);
            CFRelease(addressBook);
        }
        callback(contacts, nil);
    } fail: ^() {
        callback(nil, @"通讯录未授权");
    }];
}

// MARK: - 通讯录选择
-(void)contactPick: (EMiniNativeSystemAPIBlock)callback {
    
    __weak typeof (EMiniNativeSystemAPI *) wSelf = self;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self getContactAuthorization:^{
            
            if ([wSelf isNine]) {
                wSelf.contactCallBack = callback;
                CNContactPickerViewController *contactsVC = [[CNContactPickerViewController alloc] init];
                contactsVC.displayedPropertyKeys = @[CNContactPhoneNumbersKey];
                contactsVC.delegate = wSelf;
                [[wSelf topViewController] presentViewController:contactsVC animated:true completion:nil];
            } else {
                wSelf.contactCallBack = callback;
                ABPeoplePickerNavigationController *nav = [[ABPeoplePickerNavigationController alloc] init];
                nav.peoplePickerDelegate = wSelf;
                nav.predicateForSelectionOfPerson = [NSPredicate predicateWithValue:false];
                [[wSelf topViewController] presentViewController:nav animated:YES completion:nil];
            }
            
        } fail: ^() {
            callback(nil, @"通讯录未授权");
        }];
    });
    
}

/*!
 * @abstract Invoked when the picker is closed.
 * @discussion The picker will be dismissed automatically after a contact or property is picked.
 */
- (void)contactPickerDidCancel:(CNContactPickerViewController *)picker {
    self.contactCallBack = nil;
}

- (void)contactPicker:(CNContactPickerViewController *)picker didSelectContactProperty:(CNContactProperty *)contactProperty {
    
    NSString * identify = contactProperty.identifier;
    
    CNContact * contact = contactProperty.contact;
    
    NSArray<CNLabeledValue<CNPhoneNumber*>*> * phoneNumbers = contact.phoneNumbers;
    
    CNLabeledValue<CNPhoneNumber*>* phoneNum = nil;
    
    if (phoneNumbers.count > 1) {
        for (CNLabeledValue<CNPhoneNumber*>*item in phoneNumbers) {
            if ([item.identifier isEqualToString:identify]) {
                phoneNum = item;
                break;
            }
        }
    } else if (phoneNumbers.count == 1) {
        phoneNum = phoneNumbers[0];
    }
    
    if (phoneNum) {
        
        NSString * familyName = contact.familyName;
        
        NSString * givenName = contact.givenName;
        
        NSString * phone = phoneNum.value.stringValue;
        
        phone = [self dealForPhoneNum: phone];
        
        if (self.contactCallBack) {
            self.contactCallBack(@{@"name": (familyName && givenName) ? [familyName stringByAppendingString:givenName] : @"",
                                   @"phone": phone},
                                 nil);
        }
    } else {
        self.contactCallBack = nil;
    }
}

- (NSString *) dealForPhoneNum:(NSString *)phone {
    
    NSString * p = [[[[[phone stringByReplacingOccurrencesOfString:@"+86" withString:@""] stringByReplacingOccurrencesOfString:@"-" withString:@""] stringByReplacingOccurrencesOfString:@"(" withString:@""] stringByReplacingOccurrencesOfString:@")" withString:@""] stringByReplacingOccurrencesOfString:@" " withString:@""];
    
    NSMutableString * result = [NSMutableString string];
    
    for (int i = 0; i < [p length]; i++) {
        unichar t = [p characterAtIndex:i];
        if (isdigit(t)) {
            [result appendString:[[NSString alloc] initWithFormat:@"%c", t]];
        }
    }
    return result;
}


//取消选择
- (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker
{
    self.contactCallBack = nil;
    [peoplePicker dismissViewControllerAnimated:YES completion:nil];
}
- (void)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker didSelectPerson:(ABRecordRef)person property:(ABPropertyID)property identifier:(ABMultiValueIdentifier)identifier {
    
    NSString *firstName = (__bridge NSString *)(ABRecordCopyValue(person, kABPersonFirstNameProperty));
    NSString *lastName = (__bridge NSString *)(ABRecordCopyValue(person, kABPersonLastNameProperty));
    NSString *name = [(firstName ?: @"") stringByAppendingString:(lastName ?: @"")];
    
    ABMultiValueRef phone = ABRecordCopyValue(person, kABPersonPhoneProperty);
    long index = ABMultiValueGetIndexForIdentifier(phone,identifier);
    NSString *phoneNO = (__bridge NSString *)ABMultiValueCopyValueAtIndex(phone, index);
    
    phoneNO = [self dealForPhoneNum: phoneNO];
    
    if (self.contactCallBack) {
        self.contactCallBack(@{@"name": name, @"phone": phoneNO}, nil);
        self.contactCallBack = nil;
    }
    
    [peoplePicker dismissViewControllerAnimated:YES completion:nil];
}

- (void)peoplePickerNavigationController:(ABPeoplePickerNavigationController*)peoplePicker didSelectPerson:(ABRecordRef)person
{
    ABPersonViewController *personViewController = [[ABPersonViewController alloc] init];
    personViewController.displayedPerson = person;
    [peoplePicker pushViewController:personViewController animated:YES];
}

-(UIViewController *)topViewController {
    
    UIViewController * root = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
    return [self topViewControllByRoot:root];
}

-(UIViewController *)topViewControllByRoot:(UIViewController *)root {
    if ([root isKindOfClass:[UITabBarController class]]) {
        return [self topViewControllByRoot: ((UITabBarController *)root).selectedViewController];
    } else if ([root isKindOfClass:[UINavigationController class]]) {
        return [self topViewControllByRoot: ((UINavigationController *)root).topViewController];
    } else if (root.presentedViewController) {
        return [self topViewControllByRoot:root.presentedViewController];
    }
    return root;
}
@end
