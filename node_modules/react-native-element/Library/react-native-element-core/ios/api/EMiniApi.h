//
//  EMiniApi.h
//  reactnativeelement
//
//  Created by 王铁山 on 2018/5/10.
//  Copyright © 2018年 王铁山. All rights reserved.
//

#import <Foundation/Foundation.h>

#import <UIKit/UIKit.h>

#import <React/RCTBridgeModule.h>

@class EMiniInfoModel, RNUpdateModel, EMiniBaseViewController;

/**
 设置获取用户信息的 block

 @param getUserInfo 返回用户信息
 */
extern void EMiniSetGetUserInfoBlock(NSDictionary * (^getUserInfo)());

extern NSString * EMiniRunErrorNotificationName;

typedef enum : NSUInteger {
    EMiniErrorNet, // 获取更新网络问题
    EMiniErrorNotFound, // 没有小程序
    
    EMiniErrorNotFoundZIPPath, // 没有 zip 更新路径
    EMiniErrorZIPDownLoad, // zip 下载失败
    EMiniErrorUNZIP, // 解压失败
    
    EMiniErrorCopy, // 拷贝文件失败
    
    EMiniErrorNotFoundPatchZIPPath, // 补丁包 没有 zip 更新路径
    EMiniErrorPatchZIPDownLoad, // 补丁包 zip 下载失败
    EMiniErrorPatchUNZIP, // 补丁包 解压失败
    EMiniErrorPatchApply, // 补丁包合并失败
    
    EMiniErrorMD5, // md5 不匹配
    
    EMiniErrorUnknow
} EMiniError;

@interface EMiniApi : NSObject<RCTBridgeModule>

/**
 miniId
 */
@property(nonatomic, copy, readonly)NSString * miniId;

/**
 class construct method

 @param miniId id
 @return instance
 */
+ (instancetype)mimiId: (NSString *)miniId;

/**
 配置获取小程序信息的 baseURL

 @param url url example: http://mmpt.shenmajr.com
 */
+ (void)setBaseURL: (NSString *)url;

/**
 construct method

 @param miniId id
 @return instance
 */
- (instancetype)init: (NSString *)miniId;

/**
 设置基类。如果采用 URL 打开方式小程序，将会用此基类创建新的对象
 default: EMiniBaseViewController
 @param class 基类
 */
+ (void)registBaseClass: (Class) class;

/**
 基类

 @return 基类
 */
+ (Class)baseClass;

/**
 判断是否是小程序URL

 @param url URL
 @return isMini
 */
+ (BOOL)isMini: (NSURL *)url;

/**
 打开小程序URL

 @param url URL
 @return 是否打开成功
 */
+ (BOOL)openMiniURL: (NSURL *)url;

/**
 打开小程序URL
 
 @param url URL
 @param class 使用的类
 @return 是否打开成功
 */
+ (BOOL)openMiniURL: (NSURL *)url class: (Class)class;

/**
 打开小程序

 参数:
 page: 页面
 title: loading 时标题
 debug: 是否开启 debug
 debugIp: debug ip
 params: 传递的参数
 
 @param miniId 小程序ID
 @param params 传递给小程序的参数
 */
+ (void)openMiniById: (NSString *)miniId params: (NSDictionary *)params;

/**
 打开小程序
 
 参数:
 page: 页面
 title: loading 时标题
 debug: 是否开启 debug
 debugIp: debug ip
 params: 传递的参数
 
 @param miniId 小程序ID
 @param params 传递给小程序的参数 @param class 使用的类
 */
+ (void)openMiniById: (NSString *)miniId params: (NSDictionary *)params class: (Class)class;

/**
 get mini program info

 @param result result
 @param error error
 */
-(void)getInfo: (void(^)(EMiniInfoModel *))result error: (void(^)(EMiniError))error;

/**
 get local cached model(latest)

 @return EMiniInfoModel
 */
- (EMiniInfoModel *)getCachedMiniInfo;

/**
 get mini program update info

 @param result result
 @param error error
 */
-(void)getUpdateInfo: (void(^)(RNUpdateModel *))result error: (void(^)(EMiniError))error;

/**
 download icon image

 @param path path
 @param result image
 */
- (void)downLoadIcon: (NSString *)path result: (void(^)(UIImage * image))result;

/**
 获取指定小程序的最新版本号

 @return version
 */
-(int)version;

/**
 更新指定小程序的最新版本号

 @param version version
 */
-(void)updateVersion:(NSInteger)version;

/**
 检测制定版本的 bundle 是否存在

 @param version 指定版本
 @return 是否存在
 */
- (BOOL)bundleExist:(int)version;

- (BOOL)bundlePatchExist:(int)version;

- (NSString *)bundleDirectory:(int)version;

/**
 获取指定版本 bundle 缓存路径

 @param version 指定版本
 @return 缓存路径
 */
- (NSString *)bundlePath:(int)version;

@end
