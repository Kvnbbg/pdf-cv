//
//  EMiniApi+rn.m
//  Pods
//
//  Created by wangtieshan on 6/1/18.
//
//

#import "EMiniApi+rn.h"

#import "EMiniTool.h"

#import "EMiniViewManager.h"

#import "EMiniFuncView.h"

#import "EMiniBaseViewController.h"

#import "EMiniBaseViewController+gesture.h"

#import <React/RCTConvert.h>

#import <UIKit/UIKit.h>

@implementation EMiniApi (rn)

RCT_EXPORT_METHOD(jumpToMini:(NSString *)options callBack: (RCTResponseSenderBlock)callback) {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        if (!options || !options.length) {
            return;
        }
        
        NSDictionary * params = [EMiniTool stringToObject:options];
        
        if (!params[@"miniId"]) {
            return;
        }
        
        NSString * miniId = params[@"miniId"];
        
        [EMiniApi openMiniById:miniId params:params];
        
        callback(@[[NSNull null], [NSNull null]]);
    });
    
}

// MARK: - 消失控制器
RCT_EXPORT_METHOD(dismiss:(NSString *)options) {
    NSDictionary * obj = [EMiniTool stringToObject:options];
    if ([obj isKindOfClass:[NSDictionary class]]) {
        if (obj[@"miniId"] && obj[@"uuid"]) {
            EMiniMainAsync(^{
                [[[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]] invalidAndDismiss:true];
            });
        }
    }
}

// MARK: - 配置右上角的 funcView
/*
 {
    hidden: "1", "0"
 }
 */
RCT_EXPORT_METHOD(configFuncView:(NSString *)options){
    NSDictionary * obj = [self checkMiniIdUUID:options];
    if (!obj) return;
    if ([obj.allKeys containsObject:@"hidden"]) {
        EMiniMainAsync(^{
            [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]].funcView.hidden = [obj[@"hidden"] boolValue];
        });
    }
}

// MARK: - navigationBar
/*
 {
 hidden: "1", "0"
 }
 */
RCT_EXPORT_METHOD(configNavigationBar:(NSString *)options) {
    
    NSDictionary * obj = [self checkMiniIdUUID:options];
    
    if (!obj) return;
        
    EMiniBaseViewController * vc = [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]];
    
    __weak typeof (EMiniBaseViewController *) wvc = vc;
    
    if (!vc.navigationController) {return;}
    
    EMiniMainAsync(^{
        if (obj[@"backTitle"]) {
            NSString * backTitle = obj[@"backTitle"] ?: @"返回";
            wvc.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:backTitle style:UIBarButtonItemStylePlain target:nil action:nil];
        }
        
        if (obj[@"title"]) {
            wvc.navigationItem.title = obj[@"title"];
        }
        if (obj[@"tintColor"]) {
            wvc.navigationController.navigationBar.tintColor = [RCTConvert UIColor: obj[@"tintColor"]];
        }
        
        if (obj[@"barTintColor"]) {
            wvc.navigationController.navigationBar.barTintColor = [RCTConvert UIColor: obj[@"barTintColor"]];
        }
        
        if (obj[@"titleColor"] && [RCTConvert UIColor: obj[@"titleColor"]]) {
            wvc.navigationController.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName: [RCTConvert UIColor: obj[@"titleColor"]]};
        }
    });
    
}

// MARK: - navigationBar
/*
 {
 barStyle: "default", "lightContent"
 }
 */
RCT_EXPORT_METHOD(configStatusBar:(NSString *)options) {
    
    NSDictionary * obj = [self checkMiniIdUUID:options];
    
    if (!obj) return;
    
    EMiniBaseViewController * vc = [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]];
    
    if (!vc) {return;}

    NSString * barStyle = obj[@"barStyle"];
    
    EMiniMainSafe(^{
        if (barStyle && [@[@"default", @"lightContent"] containsObject: barStyle]) {
            vc.miniBarStyle = [barStyle isEqualToString: @"default"] ? UIStatusBarStyleDefault : UIStatusBarStyleLightContent;
        } else {
            vc.miniBarStyle = UIStatusBarStyleDefault;
        }
    });
}

// MARK: - navigationBar
/*
 {
 barStyle: "default", "lightContent"
 }RCT_EXPORT_METHOD
 */
RCT_EXPORT_METHOD(callEvent:(NSString *)options) {
    
    NSDictionary * obj = [self checkMiniIdUUID:options];
    
    if (!obj) return;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        EMiniBaseViewController * vc = [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]];
        
        if (!vc) {return;}
        
        if (!obj[@"eventName"]) { return; }
        
        EMiniLog([NSString stringWithFormat:@"has get %@ js call native \neventName: %@\ndata:%@", obj[@"miniId"], obj[@"eventName"], obj[@"body"]]);
        
        [vc apiCallEvent: obj[@"eventName"] body: obj[@"body"] callBack: nil];
    });
}
// MARK: - navigationBar
/*
 {
 barStyle: "default", "lightContent"
 }
 */
RCT_EXPORT_METHOD(callEventWitchCallBack:(NSString *)options callBack: (RCTResponseSenderBlock)callback) {
    
    NSDictionary * obj = [self checkMiniIdUUID:options];
    
    if (!obj) return;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        EMiniBaseViewController * vc = [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]];
        
        if (!vc) {return;}
        
        if (!obj[@"eventName"]) { return; }
        
        EMiniLog([NSString stringWithFormat:@"has get %@ js call native \neventName: %@\ndata:%@", obj[@"miniId"], obj[@"eventName"], obj[@"body"]]);
        
        [vc apiCallEvent: obj[@"eventName"] body: obj[@"body"] callBack: callback];
    });
}
// MARK: - edgDismiss
/*
 {
 enable: true
 }
 */
RCT_EXPORT_METHOD(edgDismiss:(NSString *)options) {
    
    NSDictionary * obj = [self checkMiniIdUUID:options];
    
    if (!obj) return;
    
    EMiniBaseViewController * vc = [[EMiniViewManager share] viewByMiniId:obj[@"miniId"] uui:obj[@"uuid"]];
    
    if (!vc) {return;}
    
    if ([obj.allKeys containsObject:@"enable"]) {
        EMiniMainSafe(^{
            vc.enableEdgDismiss = [obj[@"enable"] boolValue];
        });
    }
}

- (NSDictionary *)checkMiniIdUUID: (NSString *)options {
    NSDictionary * obj = [EMiniTool stringToObject:options];
    if (!obj || ![obj isKindOfClass:[NSDictionary class]]) return nil;
    return (obj[@"miniId"] && obj[@"uuid"]) ? obj : nil;
}

@end
