/**
 * Created by wangtieshan on 2017/10/24.
 */

import React from 'react';

import {
    NativeModules,
} from 'react-native';

import { parseSetType, ENetError, parse, parseNetError, parseDefaultSet, formatError } from "./ENetAPIParse";

/*网络请求参数*/
export interface ENetRequestOptions {
    /*路径*/
    path: string;
    /*解析配置*/
    parseSet: parseSetType;
    /*是否是post请求*/
    post: boolean;
    /*是否是 json 请求*/
    json: boolean;
    /*参数*/
    params: string;
    /*超时时间*/
    timeOut: number;
    /*请求头*/
    header: any;
    /*
    请求结束 
    data: 成功回调，网络请求返回的原始数据
    error: 失败回调，如果配置了 parseSet 为解析之后的错误信息，否则只代表网络解析错误
    */
    complete: ({inData: any, data: any, error: ENetError})=>void;
    /**
     * 数据验证。如果返回 false ，则 complete 回调 error，服务器数据格式错误
     */
    validData: ({inData: any, data: any}) => boolean;
}

/// 原生网络请求类
const NativeAPI = NativeModules.RNNetAPI;

/// 原生小程序网络请求
const NativeMiniAPI = NativeModules.EMiniApi;

/**
 * 网络请求
 * @param options 请求信息
 */
export function request(options: ENetRequestOptions) {

    /// 如果原生集成了小程序，则采用小程序中实现的网络请求
    /// 将来会采用小程序取代当前的网络请求
    if (NativeMiniAPI && NativeMiniAPI.request) {
        miniRequest(options);
        return;
    }

    let params = options.params || {};

    const { path, parseSet = parseDefaultSet, post=true, json=true, complete, header={} } = options;

    let method = post ? 'POST' : 'GET';

    params.__config = {
        header: header,
    };

    NativeAPI.request(method, path, json, params ? JSON.stringify(params) : params, (error, data)=>{

        let responseData = data ? JSON.parse(data) : data;

        let responseError = error ? JSON.parse(error) : error;

        let e: ENetError = parseSet ? parse(responseData, responseError, parseSet) : parseNetError(responseError);

        let inData = responseData ? responseData.data : responseData;

        // 没有网络错误情况下，才会数据的校验
        if (!e && options.validData && !options.validData({ 'data': responseData, 'inData': inData  })) {
            e = formatError(parseSet)
        }

        if (complete) {
            complete({ 'data': responseData, 'error': e, 'inData': inData });
        }
    });

}

/**
 * 小程序网络请求（采用原生中小程序实现的网络请求）
 * @param options 请求信息
 */
export function miniRequest(options: ENetRequestOptions) {

    let params = options || {};

    const { parseSet = parseDefaultSet, post=true, complete } = options;

    params.method = post ? 'POST' : 'GET';

    params.contentType = 'application/json';

    NativeMiniAPI.request(JSON.stringify(params), (error, data)=>{

        let nativeData = data ? JSON.parse(data) : data;

        let responseData = nativeData.data;

        let responseError = error ? JSON.parse(error) : error;

        let e: ENetError = parseSet ? parse(responseData, responseError, parseSet) : parseNetError(responseError);

        let inData = responseData ? responseData.data : responseData;

        // 没有网络错误情况下，才会数据的校验
        if (!e && options.validData && !options.validData({ 'data': responseData, 'inData': inData  })) {
            e = formatError(parseSet)
        }

        if (complete) {
            complete({ 'data': responseData, 'error': e, 'inData': inData });
        }
    });

}

export type ImageProperty = {
    path: string,
    subPath: string,
    width: number,
    height: number,
    scale: number,
}

export type ImageCompressType = {
    tPath: string,
    maxWidth: number,
    maxHeight: number,
    size: number,
}
/**
 * 图片下载配置
 */
export interface ENetImageDownloadOptions {
    path: string;
    cache: boolean;
    completion: ({image: ImageProperty})=>void;
}

/**
 * 图片下载
 * @param options 图片的下载配置
 */
export function downloadImage(options: ENetImageDownloadOptions) {
    const {path, config, completion} = options;
    NativeModules.RNNetAPI.downloadImage(path, config ? JSON.stringify(config) : config, (error, data)=>{
        if (completion) {
            completion({image: (data ? JSON.parse(data) : null)});
        }
    })
}
