/**
 * Created on 15:18 2019/03/06.
 * file name Button
 * by wangtieshan
 */

import React from 'react';

import { EStyle } from './style';

import {
    View,
    TouchableOpacity,
    Animated,
    Easing,
    EdgeInsetsPropType,
    ColorPropType,
    Text
} from 'react-native';

import PropTypes from 'prop-types';

import { EImage } from './EImage';

import { ETheme } from "react-native-element";

/**
 * EButton
 * 按钮分为正常态和不可用状态
 * 高亮状态只有正常状态点击的情况下出现，并且手指点击才会出现的状态，故不定义在基本状态中
 * 
 * 高亮状态由 mask 实现，在 title 和 底部之间有一层遮罩\
 * 点击状态下，更改遮罩的颜色实现高亮状态，默认为 0.1 的黑色，点击实现点击状态
 * 
 * 当然也支持 activeOpacity，点击状态下更改透明度。使用 EButtonOpacity
 *
 * 支持正常态和不可用状态
 * 支持设置高亮状态下遮罩的颜色和透明度
 * 支持设置背景图片（支持设置正常状态图片和高亮状态和不可用状态背景图片）
 * 支持设置背景图片填充模式
 * 支持内容缩进。eg: 用来实现最小点击区域，30 * 30，但是背景图片不足 30 * 30 的情况
 * 支持设置不同状态的文本颜色。eg: 按钮不可用时的文本颜色
 * 支持设置不同状态的背景颜色。eg: 按钮不可用时的背景颜色
 * 支持设置不同状态的边框配置。
 * 支持自定义内容，存在子节点时，将会替换掉 title
 */
export class EButton extends React.Component {

    static defaultHeight: number = 50;

    static propTypes = {

        onPress: PropTypes.func,

        disable: PropTypes.bool,

        title: PropTypes.string,

        /**
         * title when disable
         * use title when undefined or null
         */
        disabledTitle: PropTypes.string,

        /**
         * title font size
         */
        fontSize: PropTypes.number,

        /**
         * background image
         */
        image: PropTypes.any,

        /**
         * highlight(touch down) image when disable
         */
        highlightImage: PropTypes.any,

        /**
         * disabled image when disable
         */
        disabledImage: PropTypes.any,

        /**
         * 内容填充模式
         * 主要针对图片来使用
         */
        contentMode: PropTypes.oneOf([
            'stretch',
            'contain',
            'cover'
        ]),

        /**
         * 内容缩进
         */
        contentInset: EdgeInsetsPropType,

        /**
         * color for title when normal
         */
        color: ColorPropType,

        /**
         * color for title when disable
         */
        disabledColor: ColorPropType,

        /**
         * background-color when normal
         */
        backgroundColor: ColorPropType,

        /**
         * background-color when disable
         */
        disabledBackgroundColor: ColorPropType,

        /**
         * border config when normal
         */
        borderConfig: PropTypes.object,

        /**
         * border config when disable
         */
        disabledBorderConfig: PropTypes.object,

        /**
         * background color for mask view
         */
        maskColor: ColorPropType,

        /**
         * opacity for mask view
         */
        maskOpacity: PropTypes.number,

        /**
         * content's css。the super view's css of title or the super view's css of `customContent`
         */
        containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
        /**
         * 按下去之后更改的透明度，因为已经采用 mask 做高亮效果，故此值默认为1
         */
        activeOpacity: PropTypes.number,

        /**
         * 禁止点击手势
         */
        disabledTouch: PropTypes.bool
    };

    static defaultProps = {
        disabledTouch: false,
        activeOpacity: 1,
        color: ETheme.color.textColorMatchMain,
        disabledColor: ETheme.color.disabledTextColor,
        disable: false,
        backgroundColor: ETheme.color.main,
        disabledBackgroundColor: ETheme.color.disabledColor,
        maskColor: '#000000',
        maskOpacity: 0.1,
        fontSize: ETheme.font.size.large,
        contentInset: { top: 0, left: 0, right: 0, bottom: 0 },
        borderConfig: { borderRadius: 8 }
    };

    constructor(props) {
        super(props);
        this.state = {
            highlight: false,
            opacityAni: new Animated.Value(0),
        };
    }

    _onPress() {
        if (this.props.disable) { return }
        this.props.onPress && this.props.onPress()
    }

    _onPressIn() {
        this._maskAnimation(this.props.disable ? 0 : this.props.maskOpacity);
        this.setState({ highlight: true });
    }

    _onPressOut() {
        this._maskAnimation(0);
        this.setState({ highlight: false });
    }

    _maskAnimation(opacity) {
        Animated.timing(
            this.state.opacityAni,
            {
                toValue: opacity,
                duration: 150,
                easing: Easing.inOut(Easing.quad),
                useNativeDriver: true,
            }
        ).start();
    }

    render() {
        const style = {
            height: EButton.defaultHeight,
            backgroundColor: this._bgColor(),
            ...this._borderStyle(),
            overflow: 'hidden'
        };
        const titleStyle = {
            color: this._titleColor(),
            fontSize: this.props.fontSize
        };
        const image = this._image();
        return (
            <TouchableOpacity
                disabled={this.props.disabledTouch}
                onPress={() => this._onPress()}
                activeOpacity={this.props.activeOpacity}
                onPressIn={() => this._onPressIn()}
                onPressOut={() => this._onPressOut()}
                style={[ style, this.props.style ]}>
                <View style={[{ flex: 1 }]}>
                    {/* image */}
                    {image && <EImage source={image} contentMode={this.props.contentMode} style={[ EStyle.absFull, this.props.contentInset ]}/>}
                    {/* mask view */}
                    <Animated.View
                        style={[ EStyle.absFull,
                            { backgroundColor: this.props.maskColor, opacity: this.state.opacityAni } ]}/>
                    {/* title */}
                    <View
                        style={[ { flex: 1 },
                            this._insetToMargin(),
                            EStyle.center,
                            { backgroundColor: 'transparent' },
                            this.props.containerStyle ]}>
                        {this.props.children || <Text style={[ titleStyle ]}>{ this._title() }</Text>}
                    </View>
                </View>
            </TouchableOpacity>
        )
    }

    _insetToMargin() {
        const inset = this.props.contentInset;
        return { marginLeft: inset.left, marginRight: inset.right, marginTop: inset.top, marginBottom: inset.bottom }
    }

    _borderStyle() {
        return (this.props.disable && this.props.disabledBorderConfig) || this.props.borderConfig;
    }

    _titleColor() {
        return this.props.disable ?  this.props.disabledColor : this.props.color;
    }

    _bgColor() {
        return this.props.disable ? this.props.disabledBackgroundColor : this.props.backgroundColor;
    }

    _title() {
        return (this.props.disable && this.props.disabledTitle) || this.props.title;
    }

    _image() {
        if (this.props.disable) { return this.props.disabledImage; }
        return (this.state.highlight && this.props.highlightImage) || this.props.image;
    }
}

/**
 * 通过改变透明度展示高亮状态
 */
export class EButtonOpacity extends EButton {

    static defaultProps = {
        activeOpacity: 0.4,
        color: ETheme.color.textColorMatchMain,
        disabledColor: ETheme.color.disabledTextColor,
        disable: false,
        backgroundColor: 'transparent',
        disabledBackgroundColor: 'transparent',
        maskColor: '#000000',
        maskOpacity: 0,
        fontSize: ETheme.font.size.large,
        contentInset: { top: 0, left: 0, right: 0, bottom: 0 },
        borderConfig: { borderRadius: 0 }
    };

}

/**
 * 竖向排列。图片和文本。
 */
export class EButtonColumnImageText extends React.Component {

    static propTypes = {
        onPress: PropTypes.func,
        /**
         * 图片
         */
        image: PropTypes.any.isRequired,
        /**
         * 图片前景色
         */
        imageTintColor: ColorPropType,
        /**
         * 图片 css
         */
        imageStyle: PropTypes.any,
        /**
         * 文本
         */
        text: PropTypes.string.isRequired,
        /**
         * 文本CSS
         */
        textStyle: PropTypes.any,
        /**
         * 图片和文本间隔
         */
        padding: PropTypes.number,
        /**
         * CSS
         */
        style: PropTypes.any
    };

    static defaultProps = {
        padding: 5,
        textStyle: { fontSize: ETheme.font.size.base }
    };

    render() {
        return (
            <EButtonOpacity
                onPress={this.props.onPress}
                borderConfig={{ borderRadius: 0 }}
                style={[{ height: null, backgroundColor: 'transparent' }, this.props.style]}
                containerStyle={{ flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                <EImage source={this.props.image} tintColor={this.props.imageTintColor} style={this.props.imageStyle}/>
                <Text style={[{ marginTop: this.props.padding }, this.props.textStyle]}>{this.props.text}</Text>
            </EButtonOpacity>
        );
    }
}