/**
 * Created by wangtieshan on 2017/10/29.
 */

import React, {Component} from 'react';

import PropTypes from 'prop-types';

import {
    View,
    Text,
    Image,
    TouchableOpacity,
    Modal,
    StyleSheet,
    Platform,
    Dimensions,
} from 'react-native';

const screenHeight = Dimensions.get('window').height;

const screenWidth = Dimensions.get('window').width;

/**
 * 自定义弹框，支持图片弹框
 * 属性:
 * title: PropTypes.string,标题
 * message: PropTypes.string,内容
 * icon: PropTypes.number, 图片，类型为:require('path')
 * // array of EAlertButtonType
 * buttons: PropTypes.array, EAlertButtonType[]
 * onClick: PropTypes.func, 点击回调 (index)=>()
 * onCancel: PropTypes.func.isRequired, 被系统取消的时候。并不是标题为取消的回调。主要是安卓中
 * 硬件的返回事件，故安卓必须实现
 *
 * example:
 * <EAlert title={'hello world'}
 visible={this.state.alert}
 buttons={[{text: '删除', textStyle: {color: 'red', fontWeight: 'bold'}},
               {text: '取消'}]}
 message={'message'} icon={require('./icon.png')} onClick={()=>{
                            this.setState({
                                alert: false,
                            });
                        }} onCancel={()=>{
                            this.setState({
                                alert: false,
                            });
                        }}/>;
 */
class EAlert extends Component {

    static propTypes = {
        title: PropTypes.string,
        message: PropTypes.string,
        icon: PropTypes.number,
        // array of EAlertButtonType
        buttons: PropTypes.array,
        onClick: PropTypes.func,
        onCancel: PropTypes.func.isRequired,
    };

    width: number = Math.min(screenWidth - 2 * 30, 300)

    constructor(props) {
        super(props);
    }

    tmpSelectedIndex: string = null;

    _onClick(index) {
        if (Platform.OS === 'ios') {
            this.tmpSelectedIndex = `${index}`
            this.props.onCancel();
        } else {
            this.props.onClick(index)
        }
    }

    _onDismiss() {
        if (Platform.OS === 'ios') {
            if (this.tmpSelectedIndex && this.props.onClick) {
                this.props.onClick(parseInt(this.tmpSelectedIndex));
            }
            this.tmpSelectedIndex = null;
        }
    }

    render() {

        return (
            <Modal {...this.props}
                   transparent={true}
                   onDismiss={()=>{this._onDismiss()}}
                   animationType={'fade'}
                   onRequestClose={()=>this.props.onCancel()}>
                <View style={[styles.body]}>
                    <View style={[styles.container, {width: this.width, maxHeight: screenHeight - 64 * 2}]}>
                        <View style={styles.topView}>
                            {this._imageView()}
                            {this._titleView()}
                            {this._messageView()}
                        </View>
                        {this._buttonsView()}
                    </View>
                </View>
            </Modal>
        )
    }

    _buttonsView() {
        let buttons = this.props.buttons || [{text: '取消', textStyle: {fontWeight: '600'}}];
        let length = buttons.length;
        let result = [];
        for (let index in buttons) {
            let extra = {};
            let intIndex = parseInt(index);
            if ((length === 2 && intIndex === 0) || (length !== 2 && intIndex === length - 1)) {
                extra.borderBottomLeftRadius = 10;
            }
            if (intIndex === length - 1) {
                extra.borderBottomRightRadius = 10;
            }
            if (length === 2 && intIndex === 1) {
                result.push(<View key={'sep' + intIndex} style={{width: 0.5, backgroundColor: '#eee',}}/>)
            } else if (intIndex !== 0) {
                result.push(<View key={'sep' + intIndex} style={{height: 0.5, backgroundColor: '#eee',}}/>)
            }
            result.push(
                this._getButton(buttons[intIndex], intIndex, [(length === 2 ? styles.buttonTwo : styles.button), extra])
            )
        }
        return (<View style={buttons.length === 2 ? styles.bottomViewRow : styles.bottomView}>
            {result}
        </View>)
    }

    _getButton(data: EAlertButtonType, index, extra) {
        return (
            <TouchableOpacity key={index}
                              style={[extra, data.style,]}
                              activeOpacity={0.6}
                              onPress={()=>{
                                  this._onClick(index)
                                }}>
                <Text style={[styles.buttonText, data.textStyle]}>{data.text}</Text>
            </TouchableOpacity>
        )
    }

    _imageView() {
        if (this.props.icon) {
            return <Image style={styles.icon} source={this.props.icon}/>;
        }
    }

    _titleView() {
        if (this.props.title) {
            let extra = this.props.message ? {marginBottom: 20} : {};
            return <Text style={[styles.title, extra]}>{this.props.title}</Text>;
        }
    }

    _messageView() {
        if (this.props.message) {
            let extra = this.props.title ? {marginTop: 0} : {};
            return <Text style={[styles.message, extra]}>{this.props.message}</Text>;
        }
    }
}

const styles = StyleSheet.create({
    body: {
        flex: 1,
        backgroundColor: '#000000aa',
        justifyContent: 'center',
        alignItems: 'center',
    } ,
    container: {
        alignItems: 'stretch',
        paddingBottom: 60,
    },
    topView: {
        backgroundColor: 'white',
        borderTopRightRadius: 10,
        borderTopLeftRadius: 10,
        alignItems: 'center',
    },
    bottomView: {
        backgroundColor: 'white',
        alignItems: 'stretch',
        shadowColor: 'black',
        shadowOpacity: 0.1,
        shadowOffset: {height: -3},
        borderBottomLeftRadius: 10,
        borderBottomRightRadius: 10,
        elevation: 3,
    },
    bottomViewRow: {
        backgroundColor: 'white',
        flexDirection: 'row',
        alignItems: 'stretch',
        shadowColor: 'black',
        shadowOpacity: 0.1,
        shadowOffset: {height: -3},
        borderBottomLeftRadius: 10,
        borderBottomRightRadius: 10,
        elevation: 5,
    },
    title: {
        marginLeft: 15,
        marginRight: 15,
        marginTop: 40,
        marginBottom: 30,
        fontSize: 17,
        fontWeight: '600',
        textAlign: 'center',
        color: '#000000',
    },
    message: {
        marginTop: 40,
        marginLeft: 15,
        marginRight: 15,
        marginBottom: 30,
        textAlign: 'center',
    },
    button: {
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'transparent',
        height: 44,
        // marginTop: 0.5,
    },
    buttonTwo: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'transparent',
        height: 44,
        // marginTop: 0.5,
    },
    buttonText: {
        backgroundColor: 'transparent',
        color: '#0076FF',
        textAlign: 'center',
        fontSize: 17,
        fontWeight: '600',
    },
    icon: {
        marginTop: 15,
    },
});

export { EAlert };

export * from './EAlertTool';