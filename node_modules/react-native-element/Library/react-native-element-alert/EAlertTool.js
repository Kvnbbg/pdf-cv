/**
 * Created on 11:01 2019/03/14.
 * file name EAlertTool
 * by wangtieshan
 */

import React, { Component } from "react";

import { EAlert } from './EAlert';

import { ETheme } from '../react-native-element-core/theme';

/**
 * 调起弹框的入参
 */
export interface EAlertType {
    /**
     * 弹框标题
     */
    title: string;
    /**
     * 弹框内容
     */
    message: string;
    /**
     * 弹框图标
     */
    icon: any;
    /**
     * 按钮
     */
    buttons: EAlertButtonType[] | string[];
    /**
     * 点击回调
     */
    onSelected: (index: number)=>void;
}

/**
 * 调起弹框中的每个按钮的配置
 */
export interface EAlertButtonType {
    /**
     * 文案
     */
    text: string;
    /**
     * 文案 CSS
     */
    textStyle?: {};
    /**
     * 按钮 CSS
     */
    style?: {};
}

Object.assign(Component.prototype, {

    alertView() {
        if (!this.state) {
            this.state = {};
        }
        if (!this.state.alert) {
            this.state.alert = {show: false};
        }
        return (
            <EAlert title={this.state.alert.title}
                    buttons={this.state.alert.buttons}
                    message={this.state.alert.message}
                    icon={this.state.alert.icon}
                    visible={this.state.alert.show}
                    onClick={(index) => {
                        let sheet = this.state.alert;
                        sheet.show = false;
                        this.setState({
                            alert: sheet
                        });
                        this.state.alert.onClick(index)
                    }}
                    onCancel={() => {
                        let sheet = this.state.alert;
                        sheet.show = false;
                        this.setState({
                            alert: sheet
                        });
                    }}/>
        )
    },

    /**
     * alert
     * @param options EAlertType
     */
    alert(options: EAlertType) {
        const {title, message, buttons = [], icon, onClick, onSelected} = options;
        if (!buttons.length) { return; }
        let show = (!!(title || message));
        this.setState({
            alert: {
                show: show,
                title: title,
                message: message,
                icon: icon,
                buttons: modifiedButtonsConfig(buttons),
                onClick: (index)=>{
                    onSelected && onSelected(index);
                    // 兼容老版回调，不建议使用此方法
                    onClick && onClick({ tapIndex: index });
                },
            }
        });
    }
});

function modifiedButtonsConfig(buttons: EAlertButtonType[]) {
    let b: EAlertButtonType[] = (typeof buttons[0] === 'string') ? buttons.map((item)=>{return {text: item}}) : [...buttons];
    for (let index = 0; index < b.length; index++) {
        let item = b[index];
        if (item.textStyle || item.style) {
            continue
        } else {
            Object.assign(item, _EAlertConfig[b.length - 1].buttons[index])
        }
    }
    return b;
}

export interface EAlertGlobalConfigOptions {
    /**
     * 按钮个数
     */
    count: number;

    /**
     * 按钮风格配置
     */
    buttons: {
        /**
         * 文案 CSS
         */
        textStyle?: {};
        /**
         * 按钮 CSS
         */
        style?: {};
    }[];
}

const _EAlertConfig = [
    {
        count: 1,
        buttons: [
            {
                textStyle: { 
                    color: 'black' 
                },
                style: {
                    backgroundColor: 'white'
                }
            }
        ]
    },
    {
        count: 2,
        buttons: [
            {
                textStyle: { 
                    color: 'black' 
                },
                style: {
                    backgroundColor: 'white'
                }
            },
            {
                textStyle: {
                    color: 'black'
                },
                style: {
                    backgroundColor: ETheme.color.main
                }
            },
        ]

    }
];

/**
 * 此方法用来做全局统一配置
 * 可以为每种按钮个数定义按钮的风格
 * 例如：
 * 只有一个按钮时，该按钮为黑背景白字
 * 有两个按钮时，第一个按钮为黑背景白字，第二个按钮为黄底黑字
 * @param config
 * @constructor
 */
export function EAlertSetGlobalConfig(config: EAlertGlobalConfigOptions[]) {
    _EAlertConfig = config;
}