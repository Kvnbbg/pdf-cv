
import React, { Component } from 'react';

import {
    View,
    WebView,
    ActivityIndicator,
    Platform,
} from 'react-native';

import PropTypes from 'prop-types';

export class EWebView extends Component {

    static navigationOptions = ({navigation})=>{
        return navigation.state.params ? ({ headerTitle: navigation.state.params.name || ''}) : {}
    };

    static propTypes = {
        /**
         * 加载的路径
         */
        path: PropTypes.string,
        /**
         * CSS
         */
        webViewStyle: PropTypes.object,
        /**
         * 注入的 javescript
         */
        injectJS: PropTypes.string,
    };

    iosProps = {
        allowsInlineMediaPlayback: true,
        dataDetectorTypes: ['phoneNumber']
    };

    androidProps = {
        domStorageEnabled: true,
        mixedContentMode: 'always',
    };

    constructor(props) {
        super(props);
    }

    webView = null;

    /**
     * 加载出错回调
     */
    onError() {

    };

    /**
     * 此处默认屏蔽了所有的错误情况，无论什么错误均不会显示，如果需要自定义错误方法，重写此方法
     * 参考 https://www.jianshu.com/p/1e15a43d036f
     * @returns {*}
     * @private
     */
    renderError () {
        return <View style={{width: 0, height: 0}}/>
    };

    /**
     * 加载完毕的回调。默认注入外部需要执行的 JS
     * @param event
     */
    onLoad(event) {
        if (this.webView && this.props) {
            let injectJS = this.props.injectJS;
            if (!injectJS && this.props.navigation) {
                injectJS = this.props.navigation.getParam('injectJS', null);
            }
            if (injectJS) {
                this.webView.injectJavaScript(this.props.injectJS);
            }
        }
    }

    /**
     * 返回上一页
     */
    goBack(){
        if (this.isCanGoBack) {
            this.webView.goBack();
        }
    }

    /**
     * 是否该请求可以正常请求。return false。则会停止请求
     * @type {null} () => boolean
     */
    onShouldStartLoadWithRequest = null;

    /**
     * 页面状态发生改变
     * @param navState
     */
    onNavigationStateChange (navState) {
        this.isCanGoBack = navState.canGoBack;
    }

    /**
     * 加载loading
     * @returns {*}
     */
    renderLoading = ()=>{
        return (
            <View style={{flex: 1, backgroundColor: 'white',}}>
                return <ActivityIndicator size={'large'} color={'#647cff'} animated={true} />
            </View>
        )
    };

    render() {
        let loadUrl = null;
        if (this.props) {
            if (this.props.path) {
                loadUrl = this.props.path
            }
            else if (this.props.navigation && this.props.navigation.state.params) {
                loadUrl = this.props.navigation.state.params.path;
            }
        }
        let source = {};
        if (loadUrl) {
            source.uri = loadUrl;
        }
        let moreProps = Platform.OS === 'ios' ? this.iosProps : this.androidProps;
        return (
            <View style={[{flex: 1,}, this.props.style]}>
                <WebView
                    /**
                    * 此处主要是为了防止当出现无法处理的错误时，webView 被隐藏问题
                    * 参考 https://www.jianshu.com/p/1e15a43d036f
                    * */
                    nativeConfig={
                        {
                            props: {
                                backgroundColor: '#ffffff',
                                flex: 1,
                            }
                        }
                    }
                    ref={webView => { this.webView = webView; }}
                    source={source}
                    scalesPageToFit={true}
                    onError={() => this.onError()}
                    onLoad={() => this.onLoad()}
                    javaScriptEnabled={true}
                    renderError={() => this.renderError()}
                    renderLoading={() => this.renderLoading()}
                    onShouldStartLoadWithRequest={this.onShouldStartLoadWithRequest}
                    onNavigationStateChange={() => this.onNavigationStateChange()}
                    {...moreProps}
                />
            </View>
        )
    }

}