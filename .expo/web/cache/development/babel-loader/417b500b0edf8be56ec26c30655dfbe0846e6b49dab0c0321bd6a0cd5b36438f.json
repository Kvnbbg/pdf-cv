{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\nvar _populateMissingKeys = function _populateMissingKeys(userAudioMode, defaultAudioMode) {\n  for (var key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode;\n};\nvar defaultMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false\n};\nvar currentAudioMode = null;\nfunction getCurrentAudioMode() {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\nexport function setAudioModeAsync(_x) {\n  return _setAudioModeAsync.apply(this, arguments);\n}\nfunction _setAudioModeAsync() {\n  _setAudioModeAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(partialMode) {\n    var mode;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n          if (InterruptionModeIOS[mode.interruptionModeIOS]) {\n            _context.next = 3;\n            break;\n          }\n          throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n        case 3:\n          if (InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n        case 5:\n          if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {\n            _context.next = 7;\n            break;\n          }\n          throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n        case 7:\n          currentAudioMode = mode;\n          _context.next = 10;\n          return ExponentAV.setAudioMode(mode);\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _setAudioModeAsync.apply(this, arguments);\n}","map":{"version":3,"names":["InterruptionModeAndroid","InterruptionModeIOS","ExponentAV","setIsEnabledAsync","PitchCorrectionQuality","_populateMissingKeys","userAudioMode","defaultAudioMode","key","hasOwnProperty","defaultMode","allowsRecordingIOS","interruptionModeIOS","MixWithOthers","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","DuckOthers","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","_x","_setAudioModeAsync","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","partialMode","mode","wrap","_callee$","_context","prev","next","Error","setAudioMode","abrupt","sent","stop"],"sources":["/home/kevin/Documents/Github/pdf-cv/node_modules/expo-av/src/Audio.ts"],"sourcesContent":["import { AudioMode, InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\n/**\n * We provide this API to customize the audio experience on iOS and Android.\n * @param partialMode\n * @return A `Promise` that will reject if the audio mode could not be enabled for the device.\n */\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (!InterruptionModeIOS[mode.interruptionModeIOS]) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (!InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"mappings":";;AAAA,SAAoBA,uBAAuB,EAAEC,mBAAmB,QAAQ,eAAe;AACvF,OAAOC,UAAU,MAAM,cAAc;AAErC,cAAc,mBAAmB;AACjC,cAAc,eAAe;AAC7B,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,sBAAsB,QAAQ,MAAM;AAE7C,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CACxBC,aAAiC,EACjCC,gBAA2B,EACd;EACb,KAAK,IAAMC,GAAG,IAAID,gBAAgB,EAAE;IAClC,IAAI,CAACD,aAAa,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;MACtCF,aAAa,CAACE,GAAG,CAAC,GAAGD,gBAAgB,CAACC,GAAG,CAAC;;;EAG9C,OAAOF,aAA0B;AACnC,CAAC;AAED,IAAMI,WAAW,GAAc;EAC7BC,kBAAkB,EAAE,KAAK;EACzBC,mBAAmB,EAAEX,mBAAmB,CAACY,aAAa;EACtDC,oBAAoB,EAAE,KAAK;EAC3BC,uBAAuB,EAAE,KAAK;EAC9BC,uBAAuB,EAAEhB,uBAAuB,CAACiB,UAAU;EAC3DC,iBAAiB,EAAE,IAAI;EACvBC,0BAA0B,EAAE;CAC7B;AAED,IAAIC,gBAAgB,GAAqB,IAAI;AAE7C,SAASC,mBAAmBA,CAAA;EAC1B,IAAI,CAACD,gBAAgB,EAAE;IACrB,OAAOV,WAAW;;EAEpB,OAAOU,gBAAgB;AACzB;AAOA,gBAAsBE,iBAAiBA,CAAAC,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAsBtC,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CAAAC,mBAAA,CAAAC,IAAA,CAtBM,SAAAC,QAAiCC,WAA+B;IAAA,IAAAC,IAAA;IAAA,OAAAJ,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC/DL,IAAI,GAAG3B,oBAAoB,CAAC0B,WAAW,EAAEV,mBAAmB,EAAE,CAAC;UAAA,IAEhEpB,mBAAmB,CAAC+B,IAAI,CAACpB,mBAAmB,CAAC;YAAAuB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAC1C,IAAIC,KAAK,uDAAqD,CAAC;QAAA;UAAA,IAElEtC,uBAAuB,CAACgC,IAAI,CAAChB,uBAAuB,CAAC;YAAAmB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAClD,IAAIC,KAAK,2DAAyD,CAAC;QAAA;UAAA,MAGzE,OAAON,IAAI,CAACrB,kBAAkB,KAAK,SAAS,IAC5C,OAAOqB,IAAI,CAAClB,oBAAoB,KAAK,SAAS,IAC9C,OAAOkB,IAAI,CAACjB,uBAAuB,KAAK,SAAS,IACjD,OAAOiB,IAAI,CAACd,iBAAiB,KAAK,SAAS,IAC3C,OAAOc,IAAI,CAACb,0BAA0B,KAAK,SAAS;YAAAgB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAE9C,IAAIC,KAAK,CACb,iJAAiJ,CAClJ;QAAA;UAEHlB,gBAAgB,GAAGY,IAAI;UAACG,QAAA,CAAAE,IAAA;UAAA,OACXnC,UAAU,CAACqC,YAAY,CAACP,IAAI,CAAC;QAAA;UAAA,OAAAG,QAAA,CAAAK,MAAA,WAAAL,QAAA,CAAAM,IAAA;QAAA;QAAA;UAAA,OAAAN,QAAA,CAAAO,IAAA;MAAA;IAAA,GAAAZ,OAAA;EAAA,CAC3C;EAAA,OAAAN,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}