{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _Sound;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from '../AV';\nimport ExponentAV from '../ExponentAV';\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n    _classCallCheck(this, Sound);\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n    this._onMetadataUpdate = null;\n    this._onAudioSampleReceived = null;\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n        status = _ref.status;\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n    this._internalMetadataUpdateCallback = function (_ref2) {\n      var key = _ref2.key,\n        metadata = _ref2.metadata;\n      if (_this._key === key) {\n        _this._onMetadataUpdate == null ? void 0 : _this._onMetadataUpdate(metadata);\n      }\n    };\n    this._internalErrorCallback = function (_ref3) {\n      var key = _ref3.key,\n        error = _ref3.error;\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n      _this._loaded = false;\n      _this._key = null;\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n    this.getStatusAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var status;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!_this._loaded) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.getStatusForSound(_this._key);\n            }));\n          case 2:\n            status = getUnloadedStatus();\n            _this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return _context.abrupt(\"return\", status);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n  }\n  return _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function () {\n      var _performOperationAndHandleStatusAsync2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(operation) {\n        var status;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n              if (!this._loaded) {\n                _context2.next = 9;\n                break;\n              }\n              _context2.next = 4;\n              return operation();\n            case 4:\n              status = _context2.sent;\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n              return _context2.abrupt(\"return\", status);\n            case 9:\n              throw new Error('Cannot complete operation because sound is not loaded.');\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _performOperationAndHandleStatusAsync(_x) {\n        return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n      }\n      return _performOperationAndHandleStatusAsync;\n    }()\n  }, {\n    key: \"_updateAudioSampleReceivedCallback\",\n    value: function _updateAudioSampleReceivedCallback() {\n      if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n        if (Platform.OS === 'ios' || Platform.OS === 'android') {\n          console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n          return;\n        } else {\n          throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n        }\n      }\n      if (this._key == null) {\n        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n      }\n      if (typeof this._key !== 'number') {\n        throw new Error(\"Cannot set Audio Sample Buffer callback when Sound instance key is of type \".concat(_typeof(this._key), \"! (expected: number)\"));\n      }\n      globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setOnMetadataUpdate\",\n    value: function setOnMetadataUpdate(onMetadataUpdate) {\n      this._onMetadataUpdate = onMetadataUpdate;\n    }\n  }, {\n    key: \"setOnAudioSampleReceived\",\n    value: function setOnAudioSampleReceived(callback) {\n      this._onAudioSampleReceived = callback;\n      if (this._key != null) {\n        this._updateAudioSampleReceivedCallback();\n      }\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function () {\n      var _loadAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(source) {\n        var _this2 = this;\n        var initialStatus,\n          downloadFirst,\n          _yield$getNativeSourc,\n          nativeSource,\n          fullInitialStatus,\n          _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n              throwIfAudioIsDisabled();\n              if (!this._loading) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('The Sound is already loading.');\n            case 5:\n              if (this._loaded) {\n                _context3.next = 15;\n                break;\n              }\n              this._loading = true;\n              _context3.next = 9;\n              return getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n            case 9:\n              _yield$getNativeSourc = _context3.sent;\n              nativeSource = _yield$getNativeSourc.nativeSource;\n              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var loadSuccess = function loadSuccess(result) {\n                  var _result = _slicedToArray(result, 2),\n                    key = _result[0],\n                    status = _result[1];\n                  _this2._key = key;\n                  _this2._loaded = true;\n                  _this2._loading = false;\n                  _this2._subscribeToNativeEvents();\n                  _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n                  resolve(status);\n                };\n                var loadError = function loadError(error) {\n                  _this2._loading = false;\n                  reject(error);\n                };\n                ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess)[\"catch\"](loadError);\n              }));\n            case 15:\n              throw new Error('The Sound is already loaded.');\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function loadAsync(_x2) {\n        return _loadAsync.apply(this, arguments);\n      }\n      return loadAsync;\n    }()\n  }, {\n    key: \"unloadAsync\",\n    value: function () {\n      var _unloadAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4() {\n        var key, status;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this._loaded) {\n                _context4.next = 12;\n                break;\n              }\n              this._loaded = false;\n              key = this._key;\n              this._key = null;\n              _context4.next = 6;\n              return ExponentAV.unloadForSound(key);\n            case 6:\n              status = _context4.sent;\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n              this._clearSubscriptions();\n              return _context4.abrupt(\"return\", status);\n            case 12:\n              return _context4.abrupt(\"return\", this.getStatusAsync());\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function unloadAsync() {\n        return _unloadAsync.apply(this, arguments);\n      }\n      return unloadAsync;\n    }()\n  }, {\n    key: \"setStatusAsync\",\n    value: function () {\n      var _setStatusAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(status) {\n        var _this3 = this;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.setStatusForSound(_this3._key, status);\n              }));\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function setStatusAsync(_x3) {\n        return _setStatusAsync.apply(this, arguments);\n      }\n      return setStatusAsync;\n    }()\n  }, {\n    key: \"replayAsync\",\n    value: function () {\n      var _replayAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee6() {\n        var _this4 = this;\n        var status,\n          _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context6.next = 3;\n                break;\n              }\n              throw new Error('Requested position after replay has to be 0.');\n            case 3:\n              return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function replayAsync() {\n        return _replayAsync.apply(this, arguments);\n      }\n      return replayAsync;\n    }()\n  }]);\n}();\n_Sound = Sound;\nSound.create = function () {\n  var _ref5 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee7(source) {\n    var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      _args7 = arguments;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n          downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n          console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n          return _context7.abrupt(\"return\", _Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return function (_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nSound.createAsync = function () {\n  var _ref6 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee8(source) {\n    var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      sound,\n      status,\n      _args8 = arguments;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n          onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n          downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n          sound = new _Sound();\n          sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n          _context8.next = 7;\n          return sound.loadAsync(source, initialStatus, downloadFirst);\n        case 7:\n          status = _context8.sent;\n          return _context8.abrupt(\"return\", {\n            sound: sound,\n            status: status\n          });\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function (_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nObject.assign(Sound.prototype, PlaybackMixin);","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","throwIfAudioIsDisabled","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","Sound","_this","_classCallCheck","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","_internalStatusUpdateCallback","_ref","key","status","_callOnPlaybackStatusUpdateForNewStatus","_internalMetadataUpdateCallback","_ref2","metadata","_internalErrorCallback","_ref3","error","_errorCallback","_clearSubscriptions","getStatusAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","_performOperationAndHandleStatusAsync","getStatusForSound","stop","_createClass","value","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","_performOperationAndHandleStatusAsync2","_callee2","operation","_callee2$","_context2","sent","Error","_x","apply","arguments","_updateAudioSampleReceivedCallback","globalThis","__EXAV_setOnAudioSampleReceivedCallback","OS","console","warn","concat","_typeof","_subscribeToNativeEvents","push","addListener","forEach","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","_loadAsync","_callee3","source","_this2","initialStatus","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","_args3","_callee3$","_context3","length","undefined","Promise","resolve","reject","loadSuccess","result","_result","_slicedToArray","loadError","loadForSound","then","loadAsync","_x2","_unloadAsync","_callee4","_callee4$","_context4","unloadForSound","unloadAsync","_setStatusAsync","_callee5","_this3","_callee5$","_context5","setStatusForSound","setStatusAsync","_x3","_replayAsync","_callee6","_this4","_args6","_callee6$","_context6","positionMillis","replaySound","_objectSpread","shouldPlay","replayAsync","create","_ref5","_callee7","_args7","_callee7$","_context7","createAsync","_x4","_ref6","_callee8","sound","_args8","_callee8$","_context8","_x5","Object","assign","prototype"],"sources":["/home/kevin/Documents/Github/pdf-cv/node_modules/expo-av/src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}